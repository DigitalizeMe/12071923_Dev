@prefix oush: <http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD/shape#> .
@prefix ould: <http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#> .
@prefix occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@base <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .

<http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD> rdf:type owl:Ontology ;
                                                                        owl:imports <http://www.w3.org/2006/time#2016> ;
                                                                        owl:imports <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> ;
                                                                        rdfs:comment "First workaround to implement OCCP-based updates and version control features."@en .

#################################################################
#    Object Properties
#################################################################


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasLinkedData
    ould:hasLinkedData rdf:type owl:ObjectProperty ;
                       rdfs:domain ould:UpdatableEntity ;
                       rdfs:range ould:LinkedData ;
                       rdfs:comment "Links an IFC component to an external dataset, document, or other reference stored either online or locally (see also: ould:hasOnlineData and ould:hasOfflineData for online/offline specifics)."@en ;
                       rdfs:label "has linked data"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasUpdate
    ould:hasUpdate rdf:type owl:ObjectProperty ;
                   rdfs:domain ould:UpdatableEntity ;
                   rdfs:range ould:Update ;
                   rdfs:comment "Connects an UpdatableEntity to an existing Update. If a prior Update exists, a new UpdateChain is initiated to track subsequent modifications."@en ;
                   rdfs:label "has update"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPredecessor
    ould:hasPredecessor rdf:type owl:ObjectProperty ;
                        rdfs:subPropertyOf ould:hasUpdate ;
                        rdfs:domain ould:Update ;
                        rdfs:range ould:Update ;
                        owl:inverseOf ould:hasSuccessor ;
                        rdf:type owl:TransitiveProperty ;
                        rdfs:comment "Links an update to its predecessor, enabling chronological tracking of entity changes (e.g., replacements or modifications). The predecessor is an update entry recording the prior state."@en ;
                        rdfs:label "has predecessor"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasSuccessor
    ould:hasSuccessor rdf:type owl:ObjectProperty ;
                      rdfs:subPropertyOf ould:hasUpdate ;
                      rdfs:domain ould:Update ;
                      rdfs:range ould:Update;
                      owl:inverseOf ould:hasPredecessor ;
                      rdf:type owl:TransitiveProperty ;
                      rdfs:comment "Links an update to a subsequent update, enabling chronological tracking of entity changes (e.g., replacements or modifications)."@en ;
                      rdfs:label "has successor"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasUpdatedValue
    ould:hasUpdatedValue rdf:type owl:ObjectProperty ;
                         rdfs:domain ould:UpdatableEntity ;
                         rdfs:range owl:Thing ;
                         rdfs:comment "The object property \"hasUpdatedValue\" links to an update to any modified value (e.g., hash, timestamp, IFC-ID, linked data, or temporal entity) recorded in an MsOCCP context."@en ;
                         rdfs:label "has updated value"@en .

    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasUpdatedEvent
    ould:hasUpdatedEvent rdf:type owl:ObjectProperty ;
                         rdfs:subPropertyOf ould:hasUpdatedValue ;
                         rdfs:domain ould:UpdatableEntity ;
                         rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
                         rdfs:comment "The object property \"hasUpdatedEvent\" links a temporal entity (phase, cycle, transition, or instant) to an update typically recorded in an MsOCCP (Model-specific OCCP) file. It enables chronological tracking of modifications to lifecycle data (e.g., updates to time:hasTime or occp:hasEstimatedEnd), ensuring the integrity of time-based records."@en ;
                         rdfs:label "has updated event"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasNewValue
    ould:hasNewValue rdf:type owl:ObjectProperty ;
                     rdfs:subPropertyOf ould:hasUpdatedValue ;
                     rdfs:domain ould:UpdatableEntity ;
                     rdfs:range owl:Thing ;
                     owl:inverseOf ould:hasPreviousValue ;
                     rdfs:comment "Links an update to the newly recorded value of a modified property."@en ;
                     rdfs:label "has new value"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPreviousValue
    ould:hasPreviousValue rdf:type owl:ObjectProperty ;
                          rdfs:subPropertyOf ould:hasUpdatedValue ;
                          rdfs:domain ould:UpdatableEntity ;
                          rdfs:range owl:Thing ;
                          owl:inverseOf ould:hasNewValue ;
                          rdfs:comment "Links an update to the previous recorded value of a modified property."@en ;
                          rdfs:label "has previous value"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPreviousChain
    ould:hasPreviousChain rdf:type owl:ObjectProperty ;
                          owl:inverseOf ould:hasNextChain ;
                          rdf:type owl:TransitiveProperty ;
                          rdfs:domain ould:UpdateChain ;
                          rdfs:range ould:UpdateChain ;
                          rdfs:comment "The object property \"hasPreviousChain\" links an UpdateChain instance to its predecessor, forming a chronological sequence of modifications. Due to its transitive nature, it enables deep tracking of changes across multiple update cycles, e.g., linking sequential modifications of an IFC component."@en ;
                          rdfs:label "has previous chain"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasNextChain
    ould:hasNextChain rdf:type owl:ObjectProperty ;
                      owl:inverseOf ould:hasPreviousChain ;
                      rdf:type owl:TransitiveProperty ;
                      rdfs:domain ould:UpdateChain ;
                      rdfs:range ould:UpdateChain ;
                      rdfs:comment "The object property \"hasNextChain\" links an UpdateChain instance   to its successor, enabling the structured progression of modification records. Its transitivity ensures complete traceability over multiple updates."@en ;
                      rdfs:label "has next chain"@en .    


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasUpdateChain
    ould:hasUpdateChain rdf:type owl:ObjectProperty ;
                        rdfs:domain ould:UpdatableEntity ;
                        rdfs:range ould:UpdateChain ;
                        rdfs:comment "The object property \"hasUpdateChain\" links an UpdatableEntity to an \"UpdateChain\", grouping multiple related Updates (in contrast to ould:hasUpdate for single Updates)."@en ;
                        rdfs:label "has update chain"@en .  


#################################################################
#    Data properties
#################################################################


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasOnlineData
    ould:hasOnlineData rdf:type owl:DatatypeProperty ;
                       rdfs:subPropertyOf ould:hasLinkedData ; 
                       rdfs:domain ould:UpdatableEntity ;
                       rdfs:range xsd:anyURI ;
                       rdfs:comment "Links an IFC component to an external dataset, document, or other reference stored online."@en ;
                       rdfs:label "has online data"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasOfflineData
    ould:hasOfflineData rdf:type owl:DatatypeProperty ;
                        rdfs:subPropertyOf ould:hasLinkedData ;
                        rdfs:domain ould:UpdatableEntity ;
                        rdfs:range xsd:string ;
                        rdfs:comment "Links an IFC component to an external dataset, document, or other reference stored offline."@en ;
                        rdfs:label "has offline data"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasDataLocation
    ould:hasDataLocation rdf:type owl:DatatypeProperty ;
                         rdfs:domain ould:LinkedData ;
                         rdfs:range xsd:string ;
                         rdfs:comment "The data property \"hasDataLocation\" specifies the location of the linked data and is used in conjunction with ould:hasOnlineData or ould:hasOfflineData to specify the exact location. It can be a URI (for online storage) or a local file path (for offline storage)."@en ;
                         rdfs:label "has data location"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasHash
    ould:hasHash rdf:type owl:DatatypeProperty ;
                 rdfs:domain ould:UpdatableEntity ;
                 rdfs:range xsd:string ;
                 rdfs:comment "The data property \"hasHash\" is used to store the hash value of an IFC component to record the current state of a IFC component. The hash value is also used to check for changes of the IFC component."@en ;
                 rdfs:label "has hash"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasIFCID
    ould:hasIFCID rdf:type owl:DatatypeProperty ;
                  rdfs:domain ould:UpdatableEntity ;
                  rdfs:range xsd:string ;
                  rdfs:comment "The data property \"hasIFCID\" is used to store the IFC Identifier (e.g., the IFC component's GlobalID) of a component to record and establish a connection between an IFC component and the MsOCCP (Model-specific OCCP)."@en ;
                  rdfs:label "has IFC ID"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasNewHash
    ould:hasNewHash rdf:type owl:DatatypeProperty ;
                    rdfs:subPropertyOf ould:hasHash ;
                    rdfs:domain ould:UpdatableEntity ;
                    rdfs:range xsd:string ;
                    rdfs:comment "The data property \"hasNewHash\" is used to update an existing hash value of an IFC component to record and establish a connection between the old and the new hash. It is used in combination with ould:hasPreviousHash."@en ;
                    rdfs:label "has new hash"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasNewIFCID
    ould:hasNewIFCID rdf:type owl:DatatypeProperty ;
                    rdfs:subPropertyOf ould:hasIFCID ;
                    rdfs:domain ould:UpdatableEntity ;
                    rdfs:range xsd:string ;
                    rdfs:comment "The data property \"hasNewIFCID\" is used to store the IFC new Identifier (e.g., the IFC component's GlobalID) of a component to record and establish a connection between the old and the new ID. It is used in combination with ould:hasPreviousIFCID."@en ;
                    rdfs:label "has new IFC ID"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasNewTime
    ould:hasNewTime rdf:type owl:DatatypeProperty ;
                    rdfs:subPropertyOf <http://www.w3.org/2006/time#hasTime> ;
                    rdfs:domain [ rdf:type owl:Class ;
                                    owl:unionOf ( ould:Update time:Instant ) ] ;
                    rdfs:range xsd:date ;
                    rdfs:comment "The data property \"hasNewTime\" is used to record the updated timestamp of an event in an MsOCCP (Model-specific OCCP) file. It ensures that every change to a temporal entity is chronologically documented, allowing for a complete reconstruction of modifications and their sequence."@en ;
                    rdfs:label "has new time"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPreviousTime
    ould:hasPreviousTime rdf:type owl:DatatypeProperty ;
                         rdfs:subPropertyOf <http://www.w3.org/2006/time#hasTime> ;
                         rdfs:domain [ rdf:type owl:Class ;
                                    owl:unionOf ( ould:Update time:Instant ) ] ;
                         rdfs:range xsd:date ;
                         rdfs:comment "The data property \"hasPreviousTime\" is used to record the previously set timestamp (created using the original entry property, e.g., time:hasTime) of an existing and prerecorded event (of which the temporal information needs to be changed/corrected) in an MsOCCP (Model-specific OCCP) file. It can be used to keep track of the chronology of entries, allowing for a complete reconstruction of modifications and their sequence."@en ;
                         rdfs:label "has previous time"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPreviousHash
    ould:hasPreviousHash rdf:type owl:DatatypeProperty ;
                        rdfs:subPropertyOf ould:hasHash ;
                        rdfs:domain ould:UpdatableEntity ;
                        rdfs:range xsd:string ;
                        rdfs:comment "The data property \"hasPreviousHash\" is used to store the old hash value of an IFC component to record and establish a connection between the old and the new hash. It is used in combination with ould:hasNewHash."@en ;
                        rdfs:label "has previous hash"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#hasPreviousIFCID
    ould:hasPreviousIFCID rdf:type owl:DatatypeProperty ;
                        rdfs:subPropertyOf ould:hasIFCID ;
                        rdfs:domain ould:UpdatableEntity ;
                        rdfs:range xsd:string ;
                        rdfs:comment "The data property \"hasPreviousIFCID\" is used to store the old IFC Identifier (e.g., the IFC component's GlobalID) of a component to record and establish a connection between the old and the new ID. It is used in combination with ould:hasNewIFCID."@en ;
                        rdfs:label "has previous IFC ID"@en .


#################################################################
#    Classes
#################################################################


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#LinkedData
    ould:LinkedData rdf:type owl:Class ;
                    rdfs:comment "Represents an external dataset, document, or reference that is linked to an IFC component. This class enables structured integration of additional information into the MsOCCP."@en ;
                    rdfs:label "Linked Data"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#UpdatableEntity
    ould:UpdatableEntity rdf:type owl:Class ;
                         rdfs:comment "A superclass representing any entity that can undergo updates. This includes IFC components, MsOCCP records, temporal entities and other objects that require chronological modification tracking, e.g., attached or linked data."@en ;
                         rdfs:label "Updatable Entity"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#Update
    ould:Update rdf:type owl:Class ;
                rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
                rdfs:comment "The class \"Update\" represents a specific modification recorded in an MsOCCP (Model-specific OCCP) file. Each instance captures a single event's transformation, including changes in timestamps, IFC component identifiers, and hash values. By linking to previous updates, it enables full traceability of modifications over time."@en ;
                rdfs:label "Update"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#UpdateChain
    ould:UpdateChain rdf:type owl:Class ;
                rdfs:comment "The class \"UpdateChain\" represents a structured sequence of consecutive updates applied to a specific IFC component or dataset. It groups related updates together, enabling an organized way to track modifications over time. Each \"UpdateChain\" instance is linked to previous and next chains, ensuring a complete versioning history. An \"UpdateChain\" is limited to 20 ould:UpdateChainElement(s) for performance reasons."@en ;
                rdfs:label "Update Chain"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#UpdateChainElement
    ould:UpdateChainElement rdf:type owl:Class ;
                rdfs:subClassOf ould:Update ;
                rdfs:comment "The class \"UpdateChainElement\" represents an update that is part of an \"UpdateChain\". It maintains sequential tracking of updates, ensuring chronological integrity of changes to IFC components and other time-bound entities."@en ;
                rdfs:label "Update Chain Element"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#UpdateReplacement
    ould:UpdateReplacement rdf:type owl:Class ;
                        rdfs:subClassOf ould:Update ;
                        rdfs:comment "Represents an update that replaces one or more existing entities with a new one (e.g., replacing IFC component ifc:Wall123 with ifc:Wall456). It links the predecessor update or entry in the MsOCCP (recording the old state) via ould:hasPredecessor and tracks changes in identifiers and hash values using ould:hasPreviousIFCID, ould:hasNewIFCID, ould:hasPreviousHash, and ould:hasNewHash."@en ;
                        rdfs:label "Update Replacement"@en .          


#################################################################
#    SHACL SHAPES
#################################################################

### GENERAL SHAPE RULES

    oush:GeneralDatePropertyShape a sh:PropertyShape ;     # All dates are in the xs-date format (YYYY-MM-DD).
        sh:path [ sh:alternativePath ( time:hasTime time:hasBeginning occp:hasActualBeginning occp:hasEstimatedBeginning time:hasEnd occp:hasActualEnd occp:hasEstimatedEnd ould:hasNewTime ould:hasPreviousTime ) ] ;
        sh:datatype xsd:date ;
        sh:message "The date must be in the format YYYY-MM-DD." ;
        sh:severity sh:Violation .


### UPDATE SHAPE RULES

    oush:UpdateShape a sh:NodeShape ;
        sh:targetClass ould:Update ;
        sh:property oush:GeneralDatePropertyShape ;  # Date format YYYY-MM-DD 
        sh:property [
            sh:path time:hasTime ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each Update must have exactly one time stamp (time:hasTime) - min./max. count = 1." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasNewTime ;
            sh:datatype xsd:date ;
            sh:maxCount 1 ;
            sh:node [ 
                sh:property [
                    sh:path ould:hasPreviousTime ;
                    sh:minCount 1 ;
                    sh:message "If hasNewTime is specified, hasPreviousTime must also be provided." ;
                    sh:severity sh:Violation ;
                ] ;
            ] ;
            sh:message "Each Update may have exactly one ould:hasNewTime timestamp." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasPreviousTime ;
            sh:maxCount 1 ;
            sh:node [ 
                sh:property [
                    sh:path ould:hasNewTime ;
                    sh:minCount 1 ;
                    sh:message "If hasPreviousTime is specified, hasNewTime must also be provided." ;
                    sh:severity sh:Violation ;
                ] ;
            ] ;
            sh:message "An Update may have at most one ould:hasPreviousTime value." ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path ould:hasUpdatedEvent ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each Update must reference exactly one updated event (time:instant or time:interval)." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasIFCID ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:datatype xsd:string ;
            sh:message "Each Update can only be linked to one IFC component via ould:hasIFCID." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasHash ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:datatype xsd:string ;
            sh:message "Each Update can be linked to at most one IFC component's hash value via ould:hasHash." ;
            sh:severity sh:Violation ;
        ] ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "hasNewTime must be later than hasPreviousTime if both exist." ;
            sh:severity sh:Violation ;
            sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ] ;
            sh:select """
                SELECT $this ?prevTime ?newTime
                WHERE {
                    $this ould:hasPreviousTime ?prevTime .
                    $this ould:hasNewTime ?newTime .
                    FILTER (?newTime <= ?prevTime)
                }
            """ ;
        ] .

    oush:UpdateChainShape a sh:NodeShape ;
        sh:targetClass ould:UpdateChain ;
        sh:property [
            sh:path ould:hasNextChain ;
            sh:class ould:UpdateChain ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChain may be linked to at most one next chain." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasPreviousChain ;
            sh:class ould:UpdateChain ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChain may be linked to at most one previous chain." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasUpdate ;
            sh:class ould:UpdateChainElement ;
            sh:minCount 1 ;
            sh:maxCount 20 ;
            sh:message "Each UpdateChain must contain between 1 and 20 UpdateChainElements." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasBeginning ;
            sh:datatype xsd:date ; 
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChain must have a beginning in format xsd:date." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasEnd ;
            sh:datatype xsd:date ; 
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChain must have a End in format xsd:date." ;
            sh:severity sh:Violation ;    
        ] ;
        sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "time:hasBeginning must match the earliest time:hasTime of its Updates." ;
        sh:severity sh:Violation ;
        sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ;
                      sh:declare [ sh:prefix "time" ; sh:namespace "http://www.w3.org/2006/time#" ] ] ;
        sh:select """
            SELECT $this ?begin ?earliest
            WHERE {
                $this time:hasBeginning ?begin .
                $this ould:hasUpdate ?update .
                ?update time:hasTime ?updateTime .
                {
                    SELECT $this (MIN(?time) AS ?earliest)
                    WHERE {
                        $this ould:hasUpdate ?u .
                        ?u time:hasTime ?time .
                    }
                    GROUP BY $this
                }
                FILTER (?begin != ?earliest)
            }
        """ ;
        ] ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "time:hasEnd must match the latest time:hasTime of its Updates." ;
            sh:severity sh:Violation ;
            sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ;
                        sh:declare [ sh:prefix "time" ; sh:namespace "http://www.w3.org/2006/time#" ] ] ;
            sh:select """
                SELECT $this ?end ?latest
                WHERE {
                    $this time:hasEnd ?end .
                    $this ould:hasUpdate ?update .
                    ?update time:hasTime ?updateTime .
                    {
                        SELECT $this (MAX(?time) AS ?latest)
                        WHERE {
                            $this ould:hasUpdate ?u .
                            ?u time:hasTime ?time .
                        }
                        GROUP BY $this
                    }
                    FILTER (?end != ?latest)
                }
            """ ;
        ] ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "An UpdateChain must contain all Updates of its UpdatableEntity once it exists." ;
            sh:severity sh:Violation ;
            sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ] ;
            sh:select """
                SELECT $this ?entity ?update
                WHERE {
                    ?entity ould:hasUpdateChain $this .
                    ?entity ould:hasUpdate ?update .
                    FILTER NOT EXISTS { $this ould:hasUpdate ?update . }
                    {
                        SELECT ?entity (COUNT(?u) AS ?updateCount)
                        WHERE {
                            ?entity ould:hasUpdate ?u .
                        }
                        GROUP BY ?entity
                        HAVING (?updateCount > 1)
                    }
                }
            """ ;
        ] .

    oush:UpdateChainSizeConstraint a sh:NodeShape ;
        sh:targetClass ould:UpdateChain ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "An UpdateChain must not contain more than 20 UpdateChainElements." ;
            sh:severity sh:Violation ;
            sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ] ;
            sh:select """
                SELECT $this (COUNT(?update) AS ?count)
                WHERE {
                    $this ould:hasUpdate ?update .
                }
                GROUP BY $this
                HAVING (?count > 20)
            """ ;
        ] .

    oush:UpdateChainCreationShape a sh:NodeShape ;
        sh:targetClass ould:UpdatableEntity ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "If an UpdatableEntity has more than one Update, an UpdateChain must be created or extended." ;
            sh:severity sh:Violation ;
            sh:prefixes [ 
                sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] 
            ] ;
            sh:select """
                SELECT $this (COUNT(?update) AS ?updateCount) ?chain
                WHERE {
                    $this ould:hasUpdate ?update .
                    OPTIONAL { $this ould:hasUpdateChain ?chain . }
                    FILTER NOT EXISTS { ?chain ould:hasUpdate ?update . }
                }
                GROUP BY $this ?chain
                HAVING (?updateCount > 1 && !BOUND(?chain))
            """ ;
        ] .

    oush:UpdateChainElementShape a sh:NodeShape ;
        sh:targetClass ould:UpdateChainElement ;
        sh:property [
            sh:path time:hasTime ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChainElement must have exactly one time:hasTime timestamp." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasUpdatedEvent ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChainElement must reference exactly one updated event (time:instant or time:interval)." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasIFCID ;
            sh:minCount 0 ;
            sh:maxCount 2 ;
            sh:message "Each UpdateChainElement can be linked to max. two IFC components via ould:hasIFCID." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasHash ;
            sh:minCount 0 ;
            sh:maxCount 2 ;
            sh:message "Each UpdateChainElement can have max. two recorded hash values via ould:hasHash." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasNewTime ;
            sh:datatype xsd:date ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateChainElement can have at most one ould:hasNewTime timestamp in xsd:date format." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasPreviousTime ;
            sh:maxCount 1 ;
            sh:message "An UpdateChainElement may have at most one ould:hasPreviousTime value." ;
            sh:severity sh:Warning ;
        ] .

    oush:UpdatableEntityBaselineShape a sh:NodeShape ;
        sh:targetClass ould:UpdatableEntity ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "Each UpdatableEntity must have at least one Update with a hasIFCID and hasHash." ;
            sh:severity sh:Violation ;
            sh:prefixes [ sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ] ;
            sh:select """
                SELECT $this
                WHERE {
                    $this ould:hasUpdate ?update .
                    FILTER NOT EXISTS { ?update ould:hasIFCID ?ifcid . }
                    FILTER NOT EXISTS { ?update ould:hasHash ?hash . }
                }
            """ ;
        ] .

    oush:UpdateReplacementShape a sh:NodeShape ;
        sh:targetClass ould:UpdateReplacement ;
        sh:property oush:GeneralDatePropertyShape ;  # Date format YYYY-MM-DD 
        sh:property [
            sh:path time:hasTime ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each UpdateReplacement must have exactly one timestamp (time:hasTime)." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasPredecessor ;
            sh:class ould:Update ;
            sh:minCount 1 ;
            sh:message "Each UpdateReplacement must reference at least one predecessor Update via ould:hasPredecessor." ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ould:hasSuccessor ;
            sh:class ould:Update ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "An UpdateReplacement may have at most one successor (e.g., ould:Update or ould:UpdateReplacement)." ;
            sh:severity sh:Violation ;
        ] .

    oush:ReplacementChronologyConstraint a sh:NodeShape ;
        sh:targetClass ould:UpdateReplacement ;
        sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "The successor UpdateReplacement must have a later timestamp than its predecessor Update." ;
            sh:severity sh:Violation ;
            sh:prefixes [ 
                sh:declare [ sh:prefix "ould" ; sh:namespace "http://www.semanticweb.org/albrechtvaatz/ontologies/2024/OULD#" ] ;
            ] ;
            sh:select """
                SELECT $this ?prevTime ?newTime
                WHERE {
                    $this ould:hasPredecessor ?prevUpdate .
                    ?prevUpdate time:hasTime ?prevTime .
                    $this time:hasTime ?newTime .
                    FILTER (?prevTime > ?newTime) 
                }
            """ ;
        ] .

    oush:PredecessorConstraint a sh:NodeShape ;
        sh:targetSubjectsOf ould:hasPredecessor ;
        sh:property [
            sh:path ould:hasPredecessor ;
            sh:class ould:Update ;
            sh:minCount 1 ;
            sh:message "Each ould:UpdateReplacement must reference at least one predecessor ould:Update." ;
            sh:severity sh:Violation ;
        ] .

    oush:SuccessorConstraint a sh:NodeShape ;
        sh:targetSubjectsOf ould:hasSuccessor ;
        sh:property [
            sh:path ould:hasSuccessor ;
            sh:class ould:Update ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "Each ould:Update may reference at most one successor (e.g., ould:Update or ould:UpdateReplacement)." ;
            sh:severity sh:Violation ;
        ] .

    oush:UpdateEntityShape a sh:NodeShape ;
        sh:targetSubjectsOf ould:hasUpdate ;
        sh:property [
            sh:path ould:hasUpdate ;
            sh:class ould:Update ;
            sh:minCount 1 ;
            sh:message "Each entity with an update must be linked to at least one ould:Update instance." ;
            sh:severity sh:Violation ;
        ] .

    oush:UpdatedValueShape a sh:NodeShape ;
        sh:targetClass ould:Update ;
        sh:property [
            sh:path ould:hasUpdatedValue ;
            sh:minCount 1 ;
            sh:message "Each update must reference at least one modified entity (e.g., IFC component, phase, or instant)." ;
            sh:severity sh:Violation ;
        ] .

    oush:UpdatedEventShape a sh:NodeShape ;
        sh:targetClass ould:Update ;
        sh:property [
            sh:path ould:hasUpdatedEvent ;
            sh:class <http://www.w3.org/2006/time#TemporalEntity> ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each update must be linked to exactly one modified temporal entity (e.g., phase, cycle, transition, or instant)." ;
            sh:severity sh:Violation ;
        ] .

