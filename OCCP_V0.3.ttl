@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@base <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1> .
@prefix sh:     <http://www.w3.org/ns/shacl#> .
@prefix time:   <http://www.w3.org/2006/time#> .
@prefix osh:    <http://www.occpshape.de/shape#> .

<http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1> rdf:type owl:Ontology ;
                                                                        owl:imports <http://www.w3.org/2006/time#> ;
                                                                        rdfs:comment "First workaround to implement time tracking features to models"@en .

#################################################################
#    Object Properties
#################################################################

	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#after
	occp:after rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf time:after ;
		owl:inverseOf occp:before ;
		rdfs:domain <http://www.w3.org/2006/time#TemporalEntity> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents a transitive relation between temporal entities, used to ensure that if A occurs after B and B occurs after C, then A occurs after C."@en ;
		rdfs:label "after (transitive)"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#before
	occp:before rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf time:before ;
		owl:inverseOf occp:after ;
		rdfs:domain <http://www.w3.org/2006/time#TemporalEntity> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents a transitive relation between temporal entities, used to ensure that if A occurs before B and B occurs before C, then A occurs before C."@en ;
		rdfs:label "before (transitive)"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#beginsAfter
	occp:beginsAfter rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		owl:inverseOf occp:beginsBefore ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents the chronological order of beginnings between two temporal entities, used to indicate that T1’s beginning occurs after T2’s beginning, without defining the order of their ends."@en ;
		rdfs:label "begins after"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#beginsBefore
	occp:beginsBefore rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		owl:inverseOf occp:beginsAfter ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents the chronological order of beginnings between two temporal entities, used to indicate that T1’s beginning occurs before T2’s beginning, without defining the order of their ends."@en ;
		rdfs:label "begins before"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#beginsWith
	occp:beginsWith rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		rdfs:comment "This property represents the chronological order of beginnings between two temporal entities, used to indicate that T1’s beginning occurs on the same day as T2’s beginning, without defining the order of their ends."@en ;
		rdfs:label "begins with"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#belongsToLifeCycle							
	occp:belongsToLifeCycle rdf:type owl:ObjectProperty ;
		rdfs:domain time:TemporalEntity ;
		rdfs:range occp:LifeCycle ;
		rdfs:comment "This property represents the connection of a phase or instant to its lifecycle, used to link temporal entities to the overarching lifecycle they belong to."@en ;
		rdfs:label "belongs to lifecycle"@en .								


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#endsAfter
	occp:endsAfter rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		owl:inverseOf occp:endsBefore ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents the chronological order of endings between two temporal entities, used to indicate that T1’s end occurs after T2’s end, without defining the order of their beginnings."@en ;
		rdfs:label "ends after"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#endsBefore
	occp:endsBefore rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		owl:inverseOf occp:endsAfter ;
		rdf:type owl:TransitiveProperty ;
		rdfs:comment "This property represents the chronological order of endings between two temporal entities, used to indicate that T1’s end occurs before T2’s end, without defining the order of their beginnings."@en ;
		rdfs:label "ends before"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#endsCycle
	occp:endsCycle rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range occp:Cycle ;
		rdfs:comment "This property represents the relationship between an instant and a cycle, used to mark instants that end an ongoing cycle within a phase."@en ;
		rdfs:label "ends cycle"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#endsPhase
	occp:endsPhase rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range occp:Phase ;
		rdfs:comment "This property represents the relationship between an instant and a phase, used to mark instants that end an ongoing phase."@en ;
		rdfs:label "ends phase"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#endsWith
    occp:endsWith rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#TemporalEntity> ;
		rdfs:comment "This property represents the chronological order of endings between two temporal entities, used to indicate that T1’s end occurs on the same day as T2’s end, without defining the order of their beginnings."@en ;
		rdfs:label "ends with"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasActualBeginning
    occp:hasActualBeginning rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This property represents the connection between an interval and an instant, used to mark the actual beginning of a phase."@en ;
		rdfs:label "has actual beginning"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasActualEnd
    occp:hasActualEnd rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range  <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This property represents the connection between an interval and an instant, used to mark the actual end of a phase."@en ;
		rdfs:label "has actual end"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasActualTime
    occp:hasActualTime rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasTime> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range  xsd:date ;
		rdfs:comment "This property represents the connection between an instant and a date, used to mark the actual point in time of an instant."@en ;
		rdfs:label "has actual time"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasCycleNumber
    occp:hasCycleNumber rdf:type owl:DatatypeProperty ;
		rdfs:domain occp:Cycle ;
		rdfs:range xsd:integer ;
		rdfs:comment "This property represents the number of iterations in a cycle, used to specify how many times a process like a planning review repeats (e.g., in CycleA_PlanningReview)."@en ;
		rdfs:label "has cycle number"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasEstimatedBeginning
    occp:hasEstimatedBeginning rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range  <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This property represents the connection between an interval and an instant, used to mark the estimated beginning of a phase."@en ;
		rdfs:label "has estimated beginning"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasEstimatedEnd
    occp:hasEstimatedEnd rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasEnd> ;
		rdfs:domain <http://www.w3.org/2006/time#Interval> ;
		rdfs:range  <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This property represents the connection between an interval and an instant, used to mark the estimated end of a phase."@en ;
		rdfs:label "has estimated end"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasEstimatedTime
    occp:hasEstimatedTime rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasTime> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range  xsd:date ;
		rdfs:comment "This property represents the connection between an instant and a date, used to mark the estimated point in time of an instant."@en ;
		rdfs:label "has estimated time"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasInstant
    occp:hasInstant rdf:type owl:ObjectProperty ;
		rdfs:range <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This property represents the link between an updatable entity and an instant, used to connect specific lifecycle events (e.g., BeginningOfPlanning) from the MsOCCP to components or models."@en ;
		rdfs:label "has instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasPhase
    occp:hasPhase rdf:type owl:ObjectProperty ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range occp:Phase ;
		rdfs:comment "This property represents the connection between an instant and a phase, used to link time instants to their respective phases."@en ;
		rdfs:label "has phase"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#isInPhase
    occp:isInPhase rdf:type owl:ObjectProperty ;
		rdfs:domain occp:LifeCycle ;
		rdfs:range occp:Phase ;
		rdfs:comment "This property represents the embedding of a lifecycle within a phase, used to link a lifecycle to the overarching phase it belongs to."@en ;
		rdfs:label "is in phase"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#startsCycle
    occp:startsCycle rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range occp:Cycle ;
		rdfs:comment "This property represents the relationship between an instant and a cycle, used to mark instants that start a new cycle within a phase."@en ;
		rdfs:label "starts cycle"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#startsPhase
    occp:startsPhase rdf:type owl:ObjectProperty ;
		rdfs:subPropertyOf <http://www.w3.org/2006/time#hasBeginning> ;
		rdfs:domain <http://www.w3.org/2006/time#Instant> ;
		rdfs:range occp:Phase ;
		rdfs:comment "This property represents the relationship between an instant and a phase, used to mark instants that start a new phase."@en ;
		rdfs:label "starts phase"@en . 


#################################################################
#    Datatype Properties
#################################################################

	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#hasLifeCycleID
	occp:hasLifeCycleID rdf:type owl:DatatypeProperty ;
		rdfs:domain occp:LifeCycle ;
		rdfs:range xsd:string ;
		rdfs:comment "This property represents the unique identifier of a lifecycle, used to provide a distinct ID for tracking purposes."@en ;
		rdfs:label "has lifecycle ID"@en .


#################################################################
#    Classes
#################################################################

    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#BeginOfTenderingProcess
    occp:BeginOfTenderingProcess rdf:type owl:Class ;
		rdfs:subClassOf occp:Transition ;
		rdfs:comment "This class represents the instant marking the start of the tendering process, a transition between the planning and construction phases, occurring after the completion of planning."@en ;
		rdfs:label "Begin of Tendering Process"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#BeginningOfPlanning
    occp:BeginningOfPlanning rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseA_Instant ;
		rdfs:comment "This class represents the instant marking the official start of the planning phase."@en ;
		rdfs:label "Beginning of Planning"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#CompletionOfConstruction
    occp:CompletionOfConstruction rdf:type owl:Class ;
		rdfs:subClassOf occp:Transition ;
		rdfs:comment "This class represents the instant marking the last acceptance and finish of construction works, serving as a transition between the construction and usage phases."@en ;
		rdfs:label "Completion of Construction"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#CompletionOfDeconstruction
    occp:CompletionOfDeconstruction rdf:type owl:Class ;
		rdfs:subClassOf occp:Transition ;
		rdfs:comment "This class represents the instant marking the completion of the final deconstruction task, ending the lifecycle of a building or construction."@en ;
		rdfs:label "Completion of Deconstruction"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#CompletionOfPlanning
    occp:CompletionOfPlanning rdf:type owl:Class ;
		rdfs:subClassOf occp:Transition ;
		rdfs:comment "This class represents the instant marking the last planning review acceptance, serving as a transition from the planning phase to the tendering process."@en ;
		rdfs:label "Completion of Planning"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ConstructionAcceptance
    occp:ConstructionAcceptance rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseC_Instant ;
		rdfs:comment "This class represents the instant marking the final acceptance of a construction or component, occurring after completion or defect elimination."@en ;
		rdfs:label "Construction Acceptance"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ConstructionCompletion
    occp:ConstructionCompletion rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseC_Instant ;
		rdfs:comment "This class represents the instant marking the completion of construction for a model component or building."@en ;
		rdfs:label "Construction Completion"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ConstructionStart
    occp:ConstructionStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseC_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of construction works for a model component or building."@en ;
		rdfs:label "Construction Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Cycle
    occp:Cycle rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Interval> ;
		rdfs:comment "This class represents a recurring time span with a starting point, period, and duration, used to track iterating processes like multiple planning reviews."@en ;
		rdfs:label "Cycle"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#CycleA_PlanningReview
    occp:CycleA_PlanningReview rdf:type owl:Class ;
		rdfs:subClassOf occp:Cycle ;
		rdfs:comment "This class represents a cycle starting with plan submission and ending with approval or rejection, used to track planning and review iterations. Multiple events possible if rejected."@en ;
		rdfs:label "Cycle A Planning Review"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DamageDetection
    occp:DamageDetection rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseK_Instant ;
		rdfs:comment "This class represents the instant marking the detection of damage affecting a component or building. Multiple events possible."@en ;
		rdfs:label "Damage Detection"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DamageObservation
    occp:DamageObservation rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseK_Instant ;
		rdfs:comment "This class represents the instant marking the observation of a known defect or damage, typically linked to inspections or monitoring systems. Multiple events possible."@en ;
		rdfs:label "Damage Observation"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DamageRepair
    occp:DamageRepair rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseK_Instant ;
		rdfs:comment "This class represents the instant marking the repair of a defect or damage, typically coinciding with the end of repair measures."@en ;
		rdfs:label "Damage Repair"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DataProcurement
    occp:DataProcurement rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseA_Instant ;
		rdfs:comment "This class represents the instant marking data procurement actions, such as geodetic measures or adding data to planning models. Multiple events possible."@en ;
		rdfs:label "Data Procurement"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DeconstructionCompletion
    occp:DeconstructionCompletion rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseM_Instant ;
		rdfs:comment "This class represents the instant marking the completion of deconstruction works, ending the lifecycle of a component or building."@en ;
		rdfs:label "Deconstruction Completion"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DeconstructionStart
    occp:DeconstructionStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseM_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of deconstruction works for a component or building."@en ;
		rdfs:label "Deconstruction Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DefectElimCompletion
    occp:DefectElimCompletion rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseC_Instant ;
		rdfs:comment "This class represents the instant marking the completion of construction works related to defect elimination for a model component or building."@en ;
		rdfs:label "Defect Elimination Completion"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DefectElimStart
    occp:DefectElimStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseC_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of construction works related to defect elimination for a model component or building."@en ;
		rdfs:label "Defect Elimination Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DesignLifeChange
    occp:DesignLifeChange rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseF_Instant ;
		rdfs:comment "This class represents the instant marking a change in the estimated design life due to factors like repairs or usage changes. Multiple events possible."@en ;
		rdfs:label "Design Life Change"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DesignLifeEnd
    occp:DesignLifeEnd rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseF_Instant ;
		rdfs:comment "This class represents the instant marking the end of the estimated design life of a component or building. Multiple events possible due to estimation changes."@en ;
		rdfs:label "Design Life End"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#DesignLifeStart
    occp:DesignLifeStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseF_Instant ;
		rdfs:comment "This class represents the instant marking the start of the estimated design life of a component or building."@en ;
		rdfs:label "Design Life Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Edit_ASTR
    occp:Edit_ASTR rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseA_Instant ;
		rdfs:comment "This class represents the instant marking significant changes to a planning model after submission to review (ASTR = After Submission To Review). Multiple events possible."@en ;
		rdfs:label "Edit ASTR"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Edit_BSTR
    occp:Edit_BSTR rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseA_Instant ;
		rdfs:comment "This class represents the instant marking significant changes to a planning model before submission to review (BSTR = Before Submission To Review). Multiple events possible."@en ;
		rdfs:label "Edit BSTR"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#GeologicalEvent
    occp:GeologicalEvent rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseH_Instant ;
		rdfs:comment "This class represents the instant marking a geological event (e.g., earthquake) affecting a component or building. Multiple events possible."@en ;
		rdfs:label "Geological Event"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#InspectionExecution
    occp:InspectionExecution rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseG_Instant ;
		rdfs:comment "This class represents the instant marking the execution of a regular inspection. Multiple events possible over the lifecycle."@en ;
		rdfs:label "Inspection Execution"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#IrregularInspection
    occp:IrregularInspection rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseG_Instant ;
		rdfs:comment "This class represents the instant marking the execution of an irregular inspection. Multiple events possible over the lifecycle."@en ;
		rdfs:label "Irregular Inspection"@en .


	###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#LifeCycle		
	occp:LifeCycle rdf:type owl:Class ;
		rdfs:subClassOf time:Interval ;
		rdfs:comment "This class represents a complete lifecycle (Phases A to M) within an overarching phase or another lifecycle, identified by a unique ID."@en ;
		rdfs:label "Life Cycle"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#LoadEvent
    occp:LoadEvent rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseH_Instant ;
		rdfs:comment "This class represents the instant marking an irregular load event affecting a component or building. Multiple events possible."@en ;
		rdfs:label "Load Event"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#NewComponent
    occp:NewComponent rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseL_Instant ;
		rdfs:comment "This class represents the instant marking the addition of a new component to an existing structure, potentially initiating a sub-lifecycle. Multiple events possible."@en ;
		rdfs:label "New Component"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#NextRegularInspection
    occp:NextRegularInspection rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseG_Instant ;
		rdfs:comment "This class represents the instant marking the planned date of the next regular inspection, based on the inspection interval. Multiple events possible over the lifecycle."@en ;
		rdfs:label "Next Regular Inspection"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Phase
    occp:Phase rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Interval> ;
		rdfs:comment "This class represents the main chronological blocks of a building’s lifecycle (e.g., planning, construction, usage), serving as a customizable base structure."@en ;
		rdfs:label "Phase"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseA_Instant
    occp:PhaseA_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase A (Planning Phase), grouping all related events."@en ;
		rdfs:label "Phase A Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseA_Planning
    occp:PhaseA_Planning rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the planning phase, starting with BeginningOfPlanning and ending with CompletionOfPlanning."@en ;
		rdfs:label "Phase A Planning"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseB_Instant
    occp:PhaseB_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase B (Review Phase), grouping all related events."@en ;
		rdfs:label "Phase B Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseB_Review
    occp:PhaseB_Review rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the review phase, starting with the first submission to review and ending with CompletionOfPlanning."@en ;
		rdfs:label "Phase B Review"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseC_Construction
    occp:PhaseC_Construction rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the construction phase, starting with ConstructionStart and ending with CompletionOfConstruction."@en ;
		rdfs:label "Phase C Construction"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseC_Instant
    occp:PhaseC_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase C (Construction Phase), grouping all related events."@en ;
		rdfs:label "Phase C Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseD_Instant
    occp:PhaseD_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase D (Usage Phase), grouping all related events."@en ;
		rdfs:label "Phase D Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseD_Usage
    occp:PhaseD_Usage rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the usage phase, starting with UsageStart and ending with UsageEnd."@en ;
		rdfs:label "Phase D Usage"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseE_Instant
    occp:PhaseE_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase E (Warranty Phase), grouping all related events."@en ;
		rdfs:label "Phase E Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseE_Warranty
    occp:PhaseE_Warranty rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the warranty phase, starting with WarrantyStart and ending with WarrantyEnd."@en ;
		rdfs:label "Phase E Warranty"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseF_DesignLife
    occp:PhaseF_DesignLife rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the design life phase, starting with DesignLifeStart and ending with DesignLifeEnd."@en ;
		rdfs:label "Phase F Design Life"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseF_Instant
    occp:PhaseF_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase F (Design Life Phase), grouping all related events."@en ;
		rdfs:label "Phase F Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseG_Inspection
    occp:PhaseG_Inspection rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the inspection phase, starting with the beginning of usage and ending with the beginning of deconstruction."@en ;
		rdfs:label "Phase G Inspection"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseG_Instant
    occp:PhaseG_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase G (Inspection Phase), grouping all related events."@en ;
		rdfs:label "Phase G Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseH_Instant
    occp:PhaseH_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase H (Special Events Phase), grouping all related events."@en ;
		rdfs:label "Phase H Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseH_SpecialEvents
    occp:PhaseH_SpecialEvents rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the special events phase, starting with the first special event and ending with the last."@en ;
		rdfs:label "Phase H Special Events"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseK_Damage
    occp:PhaseK_Damage rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the damage phase, starting with DamageDetection and ending with repair completion or deconstruction start."@en ;
		rdfs:label "Phase K Damage"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseK_Instant
    occp:PhaseK_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase K (Damage Phase), grouping all related events."@en ;
		rdfs:label "Phase K Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseL_Instant
    occp:PhaseL_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase L (Repair Phase), grouping all related events."@en ;
		rdfs:label "Phase L Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseL_Repair
    occp:PhaseL_Repair rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the repair phase, starting with RepairStart and ending with RepairCompletion."@en ;
		rdfs:label "Phase L Repair"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseM_Deconstruction
    occp:PhaseM_Deconstruction rdf:type owl:Class ;
		rdfs:subClassOf occp:Phase ;
		rdfs:comment "This class represents the deconstruction phase, starting with DeconstructionStart and ending with DeconstructionCompletion."@en ;
		rdfs:label "Phase M Deconstruction"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#PhaseM_Instant
    occp:PhaseM_Instant rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents instants within Phase M (Deconstruction Phase), grouping all related events."@en ;
		rdfs:label "Phase M Instant"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#RepairCompletion
    occp:RepairCompletion rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseL_Instant ;
		rdfs:comment "This class represents the instant marking the completion of damage repair works for a component or building. Multiple events possible."@en ;
		rdfs:label "Repair Completion"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#RepairStart
    occp:RepairStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseL_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of damage repair works for a component or building. Multiple events possible."@en ;
		rdfs:label "Repair Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ReviewApproval
    occp:ReviewApproval rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseB_Instant ;
		rdfs:comment "This class represents the instant marking the reviewer’s acceptance of a planning model, ending the planning and review phases."@en ;
		rdfs:label "Review Approval"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ReviewRejection
    occp:ReviewRejection rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseB_Instant ;
		rdfs:comment "This class represents the instant marking the reviewer’s rejection of a planning model. Multiple events possible."@en ;
		rdfs:label "Review Rejection"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#ReviewStart
    occp:ReviewStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseB_Instant ;
		rdfs:comment "This class represents the instant marking the start of the review process. Multiple events possible with rejections."@en ;
		rdfs:label "Review Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Submission
    occp:Submission rdf:type owl:Class ;
		rdfs:subClassOf occp:Transition ;
		rdfs:comment "This class represents the instant marking the end of the tendering process, serving as a transition to the construction phase."@en ;
		rdfs:label "Submission"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#SubmissionToReview
    occp:SubmissionToReview rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseA_Instant ;
		rdfs:comment "This class represents the instant marking the submission of a planning draft to the reviewer, starting Phase B. Multiple events possible."@en ;
		rdfs:label "Submission to Review"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#Transition
    occp:Transition rdf:type owl:Class ;
		rdfs:subClassOf <http://www.w3.org/2006/time#Instant> ;
		rdfs:comment "This class represents key milestones or triggering events between phases, typically enabling the start of the next phase or marking phase completion."@en ;
		rdfs:label "Transition"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#UsageChange
    occp:UsageChange rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseD_Instant ;
		rdfs:comment "This class represents the instant marking a change in usage of a component or building, potentially ending one or more usage phases and initiating new ones. Multiple events possible."@en ;
		rdfs:label "Usage Change"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#UsageEnd
    occp:UsageEnd rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseD_Instant ;
		rdfs:comment "This class represents the instant marking the end of usage for a component or building. Multiple events possible."@en ;
		rdfs:label "Usage End"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#UsageStart
    occp:UsageStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseD_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of usage for a component or building. Multiple events possible."@en ;
		rdfs:label "Usage Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#WarrantyChange
    occp:WarrantyChange rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseE_Instant ;
		rdfs:comment "This class represents the instant marking a change in warranty due to repairs or extensions. Multiple events possible."@en ;
		rdfs:label "Warranty Change"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#WarrantyEnd
    occp:WarrantyEnd rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseE_Instant ;
		rdfs:comment "This class represents the instant marking the end of a warranty period for a component or building. Multiple events possible due to restarts."@en ;
		rdfs:label "Warranty End"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#WarrantyStart
    occp:WarrantyStart rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseE_Instant ;
		rdfs:comment "This class represents the instant marking the beginning of a warranty period for a component or building. Multiple events possible due to restarts."@en ;
		rdfs:label "Warranty Start"@en .


    ###  http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#WeatherEvent
    occp:WeatherEvent rdf:type owl:Class ;
		rdfs:subClassOf occp:PhaseH_Instant ;
		rdfs:comment "This class represents the instant marking a weather event (e.g., flood) affecting a component or building. Multiple events possible."@en ;
		rdfs:label "Weather Event"@en .



###############################################################
### SHACL RULES
###############################################################

### GENERAL SHACL RULES

    osh:GeneralDatePropertyShape a sh:PropertyShape ;
        sh:path ( occp:hasActualTime occp:hasEstimatedTime ) ;
        sh:datatype xsd:date ;
        sh:message "Dates must be in YYYY-MM-DD format."@en ;
        sh:severity sh:Violation .

    osh:GeneralTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path ( time:hasBeginning time:hasEnd ) ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:message "At least one 'time:hasBeginning' or 'time:hasEnd' must reference a 'time:Instant'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual beginning via occp:hasActualBeginning."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual end via occp:hasActualEnd."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:InstantTimeShape a sh:NodeShape ;
        sh:targetClass time:Instant ;
        sh:property [
            sh:path occp:hasActualTime ;
            sh:datatype xsd:date ;
            sh:maxCount 1 ;
            sh:message "Each instant must have at most one actual timestamp via occp:hasActualTime of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasEstimatedTime ;
            sh:datatype xsd:date ;
            sh:message "Each instant must have at most one estimated timestamp via occp:hasEstimatedTime of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] .


### CYCLE RELATED SHACL RULES

    osh:CycleShape a sh:NodeShape ;
        sh:targetClass occp:Cycle ;
        sh:property [
            sh:path occp:hasCycleNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:minInclusive 1 ;
            sh:message "Each 'occp:Cycle' must specify exactly one positive integer via 'occp:hasCycleNumber' to indicate the number of iterations."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasBeginning ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Cycle' must have exactly one 'time:hasBeginning' referencing a 'time:Instant' to mark its start."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasEnd ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Cycle' must have exactly one 'time:hasEnd' referencing a 'time:Instant' to mark its end."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:CycleAShape a sh:NodeShape ;
        sh:targetClass occp:CycleA_PlanningReview ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:or (
              [ sh:class occp:BeginningOfPlanning ; ]
              [ sh:class occp:SubmissionToReview ; ]
            ) ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must have exactly one actual beginning via 'occp:hasActualBeginning' referencing 'occp:SubmissionToReview' or 'occp:BeginningOfPlanning'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
              sh:or (
                [ sh:class occp:ReviewApproval ; ]
                [ sh:class occp:ReviewRejection ; ]
              ) ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must have exactly one 'occp:hasActualEnd' referencing an instant like 'occp:ReviewApproval' or 'occp:ReviewRejection'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:isInPhase ;
            sh:or ( 
              [ sh:class occp:PhaseA_Planning ] 
              [ sh:class occp:PhaseB_Review ] 
              ) ;
            sh:minCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must be embedded in at least one 'occp:PhaseA_Planning' via 'occp:isInPhase'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:LifeCycleShape a sh:NodeShape ;
        sh:targetClass occp:LifeCycle ;
        sh:property [
            sh:path occp:hasLifeCycleID ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:LifeCycle' must have exactly one 'occp:hasLifeCycleID' of type xsd:string to provide a unique identifier."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:isInPhase ;
            sh:class occp:Phase ;
            sh:minCount 1 ;
            sh:message "Each 'occp:LifeCycle' must be embedded in at least one 'occp:Phase' via 'occp:isInPhase'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasBeginning ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:LifeCycle' must have exactly one 'time:hasBeginning' referencing a 'time:Instant' to mark its start."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasEnd ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:LifeCycle' must have exactly one 'time:hasEnd' referencing a 'time:Instant' to mark its end."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path time:hasBeginning ;
            sh:lessThanOrEquals [
                sh:path ( [ sh:inversePath occp:isInPhase ] time:hasEnd )
            ] ;
            sh:message "Each 'occp:LifeCycle' must have its 'time:hasBeginning' before or equal to the 'time:hasEnd' of the 'occp:Phase' it is embedded in via 'occp:isInPhase'."@en ;
            sh:severity sh:Violation ;
        ] .


### PHASE RELATED SHACL RULES

    osh:ShapeOfPhaseA a sh:NodeShape ;
        sh:targetClass occp:PhaseA_Planning ;
        sh:property [
          sh:path occp:endsBefore ; 
          sh:class occp:PhaseC_Construction ;
          sh:message "Each 'occp:PhaseA_Planning' must end before 'occp:PhaseC_Construction' begins via 'occp:endsBefore'."@en ;
                sh:severity sh:Warning
        ] ;
        sh:property [
          sh:path occp:endsBefore ; 
          sh:class occp:CompletionOfConstruction ;
          sh:message "Each 'occp:PhaseA_Planning' must end before 'occp:CompletionOfConstruction' via 'occp:endsBefore'."@en ;
                sh:severity sh:Violation
        ] ;  
        sh:and (
            [ sh:path occp:beginsBefore ; sh:class occp:PhaseB_Review ]
            [ sh:path occp:beginsBefore ; sh:class occp:PhaseC_Construction ;
              sh:message "Each 'occp:PhaseA_Planning' must begin before 'occp:PhaseB_Review' and 'occp:PhaseC_Construction' via 'occp:beginsBefore'."@en ;
              sh:severity sh:Violation ]
        ) ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:BeginningOfPlanning ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseA_Planning' must have exactly one actual beginning via 'occp:hasActualBeginning' referencing 'occp:BeginningOfPlanning'."@en ;
            sh:severity sh:Violation ;
        ] ;
          sh:property [
              sh:path occp:hasActualEnd ;
              sh:or (
                  [ sh:class occp:ReviewApproval ]
                  [ sh:class occp:CompletionOfPlanning ]
              ) ;
              sh:maxCount 1 ;
              sh:message "Each 'occp:PhaseA_Planning' must have exactly one actual end via 'occp:hasActualEnd' referencing 'occp:ReviewApproval' or 'occp:CompletionOfPlanning'."@en ;
              sh:severity sh:Violation ;
          ] .

    osh:ShapeOfPhaseB a sh:NodeShape ;
        sh:targetClass occp:PhaseB_Review ;
        sh:or (
            [ sh:path occp:before ; sh:class occp:PhaseC_Construction ]
            [ sh:path occp:beginsBefore ; sh:class occp:PhaseC_Construction ;
              sh:message "Each 'occp:PhaseB_Review' must begin before 'occp:PhaseC_Construction' via 'occp:beginsBefore' or occur entirely before it via 'occp:before'."@en ;
              sh:severity sh:Violation ]
        ) ;
        sh:or (
            [ sh:path occp:before ; sh:class occp:CompletionOfPlanning ]
            [ sh:path occp:endsWith ; sh:class occp:CompletionOfPlanning ;
              sh:message "Each 'occp:PhaseB_Review' must end with 'occp:CompletionOfPlanning' via 'occp:endsWith' or occur entirely before it via 'occp:before'."@en ;
              sh:severity sh:Violation ]
        ) ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:SubmissionToReview ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseB_Review' can have only one actual beginning via 'occp:hasActualBeginning' referencing 'occp:SubmissionToReview'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:ReviewApproval ]
                [ sh:class occp:CompletionOfPlanning ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseB_Review' can have only one actual end via 'occp:hasActualEnd' referencing 'occp:ReviewApproval' or 'occp:CompletionOfPlanning'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfTransitionA a sh:NodeShape ;         # Transition A (Completion of Planning) 
        sh:targetClass occp:CompletionOfPlanning ;
        sh:property [                                 # Transition order
            sh:path occp:before ;
            sh:class occp:BeginOfTenderingProcess ;
            sh:message "Each 'occp:CompletionOfPlanning' should occur before 'occp:BeginOfTenderingProcess' via 'occp:before'."@en ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [                                 # Transition time (single point in time)
            sh:path occp:hasActualTime ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CompletionOfPlanning' must have exactly one actual timestamp via 'occp:hasActualTime' of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfTransitionB a sh:NodeShape ;         # Transition B (Begin Of Tendering Process)
        sh:targetClass occp:BeginOfTenderingProcess ;    
        sh:property [                                 # Transition order
          sh:path occp:before ;                
          sh:class occp:Submission ;
          sh:message "Each 'occp:BeginOfTenderingProcess' should occur before 'occp:Submission' via 'occp:before'."@en ;
          sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Transition time (single point in time)
          sh:path occp:hasActualTime ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:message "Each 'occp:BeginOfTenderingProcess' must have exactly one actual timestamp via 'occp:hasActualTime' of type xsd:date."@en ;
          sh:severity sh:Violation ;
        ] .

      osh:ShapeOfTransitionC a sh:NodeShape ;         # Transition C (Submission)
        sh:targetClass occp:Submission ;
        sh:property [                                 # Transition order
          sh:path occp:before ;                
          sh:class occp:PhaseC_Construction ;
          sh:message "Each 'occp:Submission' should occur before 'occp:PhaseC_Construction' via 'occp:before'."@en ;
          sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Transition time (single point in time)
          sh:path occp:hasActualTime ;
          sh:maxCount 1 ;
          sh:minCount 1 ;      
          sh:message "Each 'occp:Submission' must have exactly one actual timestamp via 'occp:hasActualTime' of type xsd:date."@en ;
          ] .

    osh:ShapeOfPhaseC a sh:NodeShape ;              # Phase C (Construction)
        sh:targetClass occp:PhaseC_Construction ;
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:CompletionOfPlanning ;
            sh:message "Each 'occp:PhaseC_Construction' should occur after 'occp:CompletionOfPlanning' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:Submission ;
            sh:message "Each 'occp:PhaseC_Construction' should occur after 'occp:Submission' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:ConstructionStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseC_Construction' can have only one actual beginning via 'occp:hasActualBeginning' referencing 'occp:ConstructionStart'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:CompletionOfConstruction ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseC_Construction' can have only one actual end via 'occp:hasActualEnd' referencing 'occp:CompletionOfConstruction'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfTransitionD a sh:NodeShape ;         # Transition D (Completion Of Construction)
        sh:targetClass occp:CompletionOfConstruction ;
        sh:property [                                 # Phase order
          sh:path occp:after ;
          sh:class occp:CompletionOfPlanning ;
          sh:message "Each 'occp:CompletionOfConstruction' should occur after 'occp:CompletionOfPlanning' via 'occp:after'."@en ;
          sh:severity sh:Warning ;
        ] ;
        sh:property [                                 # Phase order
          sh:path occp:before ;
          sh:class occp:PhaseD_Usage ;
          sh:message "Each 'occp:CompletionOfConstruction' should occur before 'occp:PhaseD_Usage' via 'occp:before'."@en ;
          sh:severity sh:Warning ;
        ] ;
        sh:property [                                 # Phase order
          sh:path occp:before ;
          sh:class occp:PhaseM_Deconstruction ;
          sh:message "Each 'occp:CompletionOfConstruction' should occur before 'occp:PhaseM_Deconstruction' via 'occp:before'."@en ;
          sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:hasActualTime ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CompletionOfConstruction' must have exactly one actual timestamp via 'occp:hasActualTime' of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseD a sh:NodeShape ;              # Phase D (Usage)
        sh:targetClass occp:PhaseD_Usage ;
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:CompletionOfConstruction ;
            sh:message "Each 'occp:PhaseD_Usage' should occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Phase order
            sh:path occp:endsBefore ;
            sh:class occp:PhaseM_Deconstruction ;
            sh:message "Each 'occp:PhaseD_Usage' should end before 'occp:PhaseM_Deconstruction' via 'occp:endsBefore'. We don’t want anyone to get hurt, do we?"@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:UsageStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseD_Usage' can have only one actual beginning via 'occp:hasActualBeginning' referencing 'occp:UsageStart'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:UsageEnd ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseD_Usage' can have only one actual end via 'occp:hasActualEnd' referencing 'occp:UsageEnd'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseE a sh:NodeShape ;              # Phase E (Warranty)
        sh:targetClass occp:PhaseE_Warranty ;
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:CompletionOfConstruction ;
            sh:message "Each 'occp:PhaseE_Warranty' should occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Begin date
          sh:path occp:hasActualBeginning ;
          sh:class occp:WarrantyStart ;
          sh:maxCount 1 ;
          sh:message "Each 'occp:PhaseE_Warranty' can have only one actual beginning via 'occp:hasActualBeginning' referencing 'occp:WarrantyStart'."@en ;
          sh:severity sh:Violation ;
          ] ;
        sh:property [                                 # End date
          sh:path occp:hasActualEnd ;
            sh:class occp:WarrantyEnd ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseE_Warranty' can have only one actual end via 'occp:hasActualEnd' referencing 'occp:WarrantyEnd'."@en ;
            sh:severity sh:Violation ;
          ] .

    osh:ShapeOfPhaseF a sh:NodeShape ;              # Phase F (DesignLife)
        sh:targetClass occp:PhaseF_DesignLife ;     
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:CompletionOfConstruction ;
            sh:message "Each 'occp:PhaseF_DesignLife' should occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:or (                                       # Phase order options - Phase F
          [
            sh:path occp:beginsBefore ;
            sh:class occp:PhaseD_Usage ;
          ]
          [
            sh:path occp:beginsWith ;
            sh:class occp:PhaseD_Usage ;
            sh:message "Each 'occp:PhaseF_DesignLife' should begin before 'occp:PhaseD_Usage' via 'occp:beginsBefore' or with 'occp:PhaseD_Usage' via 'occp:beginsWith'."@en ;
            sh:severity sh:Warning ;
          ]
        ) ;
        sh:property [
          sh:path occp:before ;
          sh:class occp:PhaseM_Deconstruction ;
          sh:message "Each 'occp:PhaseF_DesignLife' should occur before 'occp:PhaseM_Deconstruction' via 'occp:before'."@en ;
          sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:DesignLifeStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseF_DesignLife' can only have one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DesignLifeStart'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:DesignLifeEnd ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseF_DesignLife' can only have one actual end via 'occp:hasActualEnd' referencing 'occp:DesignLifeEnd'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseG a sh:NodeShape ;              # Phase G (Inspection)
        sh:targetClass occp:PhaseG_Inspection ;
        sh:property [
            sh:or (
                [ sh:path occp:beginsWith ; sh:class occp:PhaseD_Usage ]
                [ sh:path occp:beginsAfter ; sh:class occp:UsageStart ]
            ) ;
            sh:message "Each 'occp:PhaseG_Inspection' must begin with 'occp:PhaseD_Usage' via 'occp:beginsWith' or after 'occp:UsageStart' via 'occp:beginsAfter'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:after ;
            sh:class occp:CompletionOfConstruction ;
            sh:message "Each 'occp:PhaseG_Inspection' should occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:before ;
            sh:class occp:PhaseM_Deconstruction ;
            sh:message "Each 'occp:PhaseG_Inspection' should occur before 'occp:PhaseM_Deconstruction' via 'occp:before'."@en ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:InspectionExecution ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseG_Inspection' can only have one actual beginning via 'occp:hasActualBeginning' referencing 'occp:InspectionExecution'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseG_Inspection' can only have one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation ;
        ] .


    osh:ShapeOfPhaseH a sh:NodeShape ;              # Phase H (SpecialEvents) - Special events can occur anytime, so this is to be handled like a super-phase. It can be used to describe or record events that have shaped the landscape like earthquakes in the past, but also events that occure during or after the construction's life cycle.
        sh:targetClass occp:PhaseH_SpecialEvents ;
        sh:property [
            sh:path occp:hasInstant ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' must have at least one instant via 'occp:hasInstant' referencing a 'time:Instant' (e.g., 'occp:GeologicalEvent', 'occp:WeatherEvent')."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' can only have one actual beginning via 'occp:hasActualBeginning' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' can only have one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseK a sh:NodeShape ;              # Phase K (Damage)
        sh:targetClass occp:PhaseK_Damage ;
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:Submission ;
            sh:message "Each 'occp:PhaseK_Damage' should occur after 'occp:Submission' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [                                 # Phase order
            sh:path occp:before ;
            sh:class occp:CompletionOfDeconstruction ;
            sh:message "Each 'occp:PhaseK_Damage' should occur before 'occp:CompletionOfDeconstruction' via 'occp:before'."@en ;
            sh:severity sh:Warning ;
          ] ;     
        sh:property [
            sh:path occp:beginsBefore ;
            sh:class occp:PhaseL_Repair ;
            sh:message "Each 'occp:PhaseK_Damage' should begin before 'occp:PhaseL_Repair' via 'occp:beginsBefore', but damage detection during repair is possible."@en ;
            sh:severity sh:Warning ;
        ] ;   
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:DamageDetection ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseK_Damage' can only have one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DamageDetection'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseK_Damage' can only have one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseL a sh:NodeShape ;              # Phase L (Repair)
        sh:targetClass occp:PhaseL_Repair ;
        sh:property [
            sh:or (
                [ sh:path occp:endsAfter ; sh:class occp:PhaseK_Damage ]
                [ sh:path occp:endsWith ; sh:class occp:PhaseK_Damage ]
            ) ;
            sh:message "Each 'occp:PhaseL_Repair' must end after 'occp:PhaseK_Damage' via 'occp:endsAfter' or with 'occp:PhaseK_Damage' via 'occp:endsWith' to ensure repair resolves damage."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:after ;
            sh:class occp:Submission ;
            sh:message "Each 'occp:PhaseL_Repair' should occur after 'occp:Submission' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:before ;
            sh:class occp:PhaseM_Deconstruction ;
            sh:message "Each 'occp:PhaseL_Repair' should occur before 'occp:PhaseM_Deconstruction' via 'occp:before'."@en ;
            sh:severity sh:Warning ;
        ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:RepairStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseL_Repair' can only have one actual beginning via 'occp:hasActualBeginning' referencing 'occp:RepairStart'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:RepairCompletion ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseL_Repair' can only have one actual end via 'occp:hasActualEnd' referencing 'occp:RepairCompletion'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfPhaseM a sh:NodeShape ;              # Phase M (Deconstruction)
        sh:targetClass occp:PhaseM_Deconstruction ;   
        sh:property [                                 # Phase order
            sh:path occp:after ;
            sh:class occp:CompletionOfConstruction ;
            sh:message "Each 'occp:PhaseM_Deconstruction' should occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
            sh:severity sh:Warning ;
          ] ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:DeconstructionStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseM_Deconstruction' can only have one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DeconstructionStart'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:CompletionOfDeconstruction ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseM_Deconstruction' can only have one actual end via 'occp:hasActualEnd' referencing 'occp:CompletionOfDeconstruction'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:ShapeOfTransitionE a sh:NodeShape ;         # Transition E (Completion Of Deconstruction)
        sh:targetClass occp:CompletionOfDeconstruction ; 
        sh:or (                                       # Transition order options
          [                       
            sh:path occp:after ;                
            sh:class occp:PhaseM_Deconstruction ;     
          ]
          [                       
            sh:path occp:endsWith ;                
            sh:class occp:PhaseM_Deconstruction ;
            sh:message "Each 'occp:CompletionOfDeconstruction' must occur after 'occp:PhaseM_Deconstruction' via 'occp:after' or end with 'occp:PhaseM_Deconstruction' via 'occp:endsWith'."@en ;
            sh:severity sh:Violation ;
          ]
        ) ;
        sh:property [                                 # Transition time (single point in time)
          sh:path occp:hasActualTime ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:message "Each 'occp:CompletionOfDeconstruction' must have exactly one actual timestamp via 'occp:hasActualTime' of type xsd:date."@en ;
            sh:severity sh:Violation ;
          ] .


### INSTANT RELATED SHACL RULES
    ### PHASE A INSTANTS
        # PHASE ASSIGNMENT

            osh:PhaseAInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseA_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseA_Instant' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE A - PLANNING

            osh:BeginningOfPlanningShape a sh:NodeShape ;   # Instant Beginning Of Planning (Phase A - Planning)
                sh:targetClass occp:BeginningOfPlanning ;   
                sh:property [                               # Instant (Beginning Of Planning) starts a new Phase A (Planning).
                    sh:path occp:startsPhase ;              
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:BeginningOfPlanning' must start exactly one 'occp:PhaseA_Planning' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:before ;                   
                    sh:class occp:DataProcurement ;
                    sh:message "Each 'occp:BeginningOfPlanning' must occur before 'occp:DataProcurement' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:SubmissionToReview ;
                    sh:message "Each 'occp:BeginningOfPlanning' should occur before 'occp:SubmissionToReview' via 'occp:before'."@en ;
                    sh:severity sh:Warning ;
                ] .

            osh:DataProcurementShape a sh:NodeShape ;       # Instant Data Procurement (Phase A - Planning)
                sh:targetClass occp:DataProcurement ;       
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:after ;                    
                    sh:class occp:BeginningOfPlanning ;
                    sh:message "Each 'occp:DataProcurement' must occur after 'occp:BeginningOfPlanning' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:before ;                   
                    sh:class occp:SubmissionToReview ;
                    sh:message "Each 'occp:DataProcurement' should occur before 'occp:SubmissionToReview' via 'occp:before'."@en ;
                    sh:severity sh:Warning ;
                ] .

            osh:Edit_BSTRShape a sh:NodeShape ;             # Instant Edit Before Submission To Review (Phase A - Planning)
                sh:targetClass occp:Edit_BSTR ; 
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:after ;                    
                    sh:class occp:BeginningOfPlanning ;
                    sh:message "Each 'occp:Edit_BSTR' must occur after 'occp:BeginningOfPlanning' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:before ;                   
                    sh:class occp:SubmissionToReview ;
                    sh:message "Each 'occp:Edit_BSTR' must occur before 'occp:SubmissionToReview' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:SubmissionToReviewShape a sh:NodeShape ;    # Instant Submission To Review (Phase A - Planning)
                sh:targetClass occp:SubmissionToReview ;
                sh:property [                               # Instant's chronological order within the Phase - 2 Options
                    sh:path occp:after ;
                    sh:or (
                        [ sh:class occp:Edit_BSTR ]
                        [ sh:class occp:Edit_ASTR ]
                    ) ;
                    sh:message "Each 'occp:SubmissionToReview' must occur after 'occp:Edit_BSTR' or 'occp:Edit_ASTR' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:startsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:SubmissionToReview' can start only one 'occp:CycleA_PlanningReview' via 'occp:startsCycle'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:Edit_ASTRShape a sh:NodeShape ;             # Instant Edit After Submission To Review (Phase A - Planning)
                sh:targetClass occp:Edit_ASTR ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:SubmissionToReview ;
                    sh:message "Each 'occp:Edit_ASTR' must occur after 'occp:SubmissionToReview' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:CompletionOfPlanning ;
                    sh:message "Each 'occp:Edit_ASTR' should occur before 'occp:CompletionOfPlanning' via 'occp:before'."@en ;
                    sh:severity sh:Warning ;
                ] .


    ### PHASE B INSTANTS
        # PHASE ASSIGNMENT        
        
            osh:PhaseBInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseB_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseB_Review ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseB_Instant' must belong to exactly one 'occp:PhaseB_Review' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE B - REVIEW

            osh:ReviewStartShape a sh:NodeShape ;           # Instant Review Start (Phase B - Review)
                sh:targetClass occp:ReviewStart ;
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseB_Review ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewStart' must start exactly one 'occp:PhaseB_Review' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:before ;
                        sh:class occp:ReviewApproval ;
                        sh:message "Each 'occp:ReviewStart' must occur before 'occp:ReviewApproval' via 'occp:before'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:before ;
                        sh:class occp:ReviewRejection ;
                        sh:message "Each 'occp:ReviewStart' must occur before 'occp:ReviewRejection' via 'occp:before'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:SubmissionToReview ;
                    sh:message "Each 'occp:ReviewStart' must occur after 'occp:SubmissionToReview' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:ReviewApprovalShape a sh:NodeShape ;        # Instant Review Approval (Phase B - Review)
                sh:targetClass occp:ReviewApproval ;
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewApproval' must end exactly one 'occp:PhaseA_Planning' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseB_Review ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewApproval' must end exactly one 'occp:PhaseB_Review' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                               # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:ReviewStart ;
                    sh:message "Each 'occp:ReviewApproval' must occur after 'occp:ReviewStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                               # Instant (Review Approval) ends current Cycle A (Planning/Review).
                    sh:path occp:endsCycle ;              
                    sh:class occp:CycleA_PlanningReview ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewApproval' must end exactly one 'occp:CycleA_PlanningReview' via 'occp:endsCycle'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:ReviewRejectionShape a sh:NodeShape ;       # Instant Review Rejection (Phase B - Review)
                sh:targetClass occp:ReviewRejection ;
                sh:property [                               # Instant's chronological order within the Phase      
                    sh:path occp:after ;
                    sh:class occp:ReviewStart ;
                    sh:message "Each 'occp:ReviewRejection' must occur after 'occp:ReviewStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:endsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewRejection' must end exactly one 'occp:CycleA_PlanningReview' via 'occp:endsCycle'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:startsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewRejection' must start exactly one new 'occp:CycleA_PlanningReview' via 'occp:startsCycle'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE C INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseCInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseC_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseC_Instant' must belong to exactly one 'occp:PhaseC_Construction' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE C - CONSTRUCTION

            osh:ConstructionStartShape a sh:NodeShape ;      # Instant Construction Start (Phase C - Construction)
                sh:targetClass occp:ConstructionStart ;
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ConstructionStart' must start exactly one 'occp:PhaseC_Construction' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order within the Phase
                    sh:path occp:before ;
                    sh:class occp:ConstructionCompletion ;
                    sh:message "Each 'occp:ConstructionStart' must occur before 'occp:ConstructionCompletion' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:Submission ;
                    sh:message "Each 'occp:ConstructionStart' must occur after 'occp:Submission' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:ConstructionCompletionShape a sh:NodeShape ; # Instant Construction Completion (Phase C - Construction)
                sh:targetClass occp:ConstructionCompletion ;
                sh:property [                                # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:ConstructionStart ;
                    sh:message "Each 'occp:ConstructionCompletion' must occur after 'occp:ConstructionStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:before ;
                        sh:class occp:ConstructionAcceptance ;
                        sh:message "Each 'occp:ConstructionCompletion' must occur before 'occp:ConstructionAcceptance' via 'occp:before'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:before ;
                        sh:class occp:DefectElimStart ;
                        sh:message "Each 'occp:ConstructionCompletion' must occur before 'occp:DefectElimStart' via 'occp:before'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) .

            osh:DefectElimStartShape a sh:NodeShape ;        # Instant Defect Elimination Start (Phase C - Construction)
                sh:targetClass occp:DefectElimStart ;
                sh:property [                                # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:ConstructionCompletion ;
                    sh:message "Each 'occp:DefectElimStart' must occur after 'occp:ConstructionCompletion' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DefectElimCompletion ;
                    sh:message "Each 'occp:DefectElimStart' must occur before 'occp:DefectElimCompletion' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:DefectElimCompletionShape a sh:NodeShape ;   # Instant Defect Elimination Completion (Phase C - Construction)
                sh:targetClass occp:DefectElimCompletion ;
                sh:property [                                # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:DefectElimStart ;
                    sh:message "Each 'occp:DefectElimCompletion' must occur after 'occp:DefectElimStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DefectElimCompletion' must occur before 'occp:ConstructionAcceptance' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:ConstructionAcceptanceShape a sh:NodeShape ; # Instant Construction Acceptance (Phase C - Construction)
                sh:targetClass occp:ConstructionAcceptance ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:before ;
                    sh:class occp:UsageStart ;
                    sh:message "Each 'occp:ConstructionAcceptance' should occur before 'occp:UsageStart' via 'occp:before'."@en ;
                    sh:severity sh:Warning ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:CompletionOfConstruction ;
                    sh:message "Each 'occp:ConstructionAcceptance' must occur before 'occp:CompletionOfConstruction' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:after ;
                        sh:class occp:ConstructionCompletion ;
                        sh:message "Each 'occp:ConstructionAcceptance' must occur after 'occp:ConstructionCompletion' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:after ;
                        sh:class occp:DefectElimCompletion ;
                        sh:message "Each 'occp:ConstructionAcceptance' must occur after 'occp:DefectElimCompletion' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) .


    ### PHASE D INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseDInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseD_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseD_Instant' must belong to exactly one 'occp:PhaseD_Usage' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE D - USAGE
                
            osh:UsageStartShape a sh:NodeShape ;      # Instant Usage Start (Phase D - Usage)
                sh:targetClass occp:UsageStart ;
                sh:property [                         # A new Usage Phase is started with Usage Start
                    sh:path occp:startsPhase ;                
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:UsageStart' must start exactly one 'occp:PhaseD_Usage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                         # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:UsageStart' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:UsageEnd ;
                    sh:message "Each 'occp:UsageStart' must occur before 'occp:UsageEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .
                
            osh:UsageChangeShape a sh:NodeShape ;      # Instant Usage Change (Phase D - Usage)
                sh:targetClass occp:UsageChange ;
                sh:property [                          # The current Usage Phase is ended with a Change of Usage
                    sh:path occp:endsPhase ;                
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:UsageChange' must end at least one 'occp:PhaseD_Usage' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                          # A new Usage Phase is started with a Change of Usage
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:UsageChange' must start at least one 'occp:PhaseD_Usage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                          # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:CompletionOfConstruction ;
                    sh:message "Each 'occp:UsageChange' must occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                          # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:UsageStart ;
                    sh:message "Each 'occp:UsageChange' must occur after 'occp:UsageStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                         
                    sh:path occp:before ;
                    sh:class occp:UsageEnd ;
                    sh:message "Each 'occp:UsageChange' must occur before 'occp:UsageEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:UsageChange' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:UsageEndShape a sh:NodeShape ;      # Instant Usage End (Phase D - Usage)
                sh:targetClass occp:UsageEnd ;
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:UsageEnd' must end exactly one 'occp:PhaseD_Usage' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                             # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:after ;
                        sh:class occp:UsageStart ;
                        sh:message "Each 'occp:UsageEnd' must occur after 'occp:UsageStart' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:after ;
                        sh:class occp:UsageChange ;
                        sh:message "Each 'occp:UsageEnd' must occur after 'occp:UsageChange' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) ;
                sh:property [                       
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:UsageEnd' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE E INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseEInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseE_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseE_Instant' must belong to exactly one 'occp:PhaseE_Warranty' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE E - WARRANTY
            osh:WarrantyStartShape a sh:NodeShape ;          # Instant Warranty Start (Phase E - Warranty)
                sh:targetClass occp:WarrantyStart ;
                sh:property [                                # A new Warranty Phase is started with Warranty Start
                    sh:path occp:startsPhase ;                
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyStart' must start exactly one 'occp:PhaseE_Warranty' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:WarrantyStart' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                
                    sh:path occp:before ;
                    sh:class occp:WarrantyEnd ;
                    sh:message "Each 'occp:WarrantyStart' must occur before 'occp:WarrantyEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:WarrantyChangeShape a sh:NodeShape ;         # Instant Warranty Change (Phase E - Warranty)
                sh:targetClass occp:WarrantyChange ;
                sh:property [                                # The current Warranty Phase is ended with a Change of Warranty
                    sh:path occp:endsPhase ;                
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:WarrantyChange' must end at least one 'occp:PhaseE_Warranty' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # A new Warranty Phase is started with a Change of Warranty
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:WarrantyChange' must start at least one 'occp:PhaseE_Warranty' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:CompletionOfConstruction ;
                    sh:message "Each 'occp:WarrantyChange' must occur after 'occp:CompletionOfConstruction' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:WarrantyStart ;
                    sh:message "Each 'occp:WarrantyChange' must occur after 'occp:WarrantyStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:WarrantyEnd ;
                    sh:message "Each 'occp:WarrantyChange' must occur before 'occp:WarrantyEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:WarrantyChange' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .
                    
            osh:WarrantyEndShape a sh:NodeShape ;            # Instant Warranty End (Phase E - Warranty)
                sh:targetClass occp:WarrantyEnd ;
                sh:property [                                # The current Warranty Phase is ended with Warranty End
                    sh:path occp:endsPhase ;                
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyEnd' must end exactly one 'occp:PhaseE_Warranty' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:after ;
                        sh:class occp:WarrantyStart ;
                        sh:message "Each 'occp:WarrantyEnd' must occur after 'occp:WarrantyStart' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:after ;
                        sh:class occp:WarrantyChange ;
                        sh:message "Each 'occp:WarrantyEnd' must occur after 'occp:WarrantyChange' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:WarrantyEnd' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE F INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseFInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseF_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseF_Instant' must belong to exactly one 'occp:PhaseF_DesignLife' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE F - DESIGN LIFE
            osh:DesignLifeStartShape a sh:NodeShape ;        # Instant Design Life Start (Phase F - Design Life)
                sh:targetClass occp:DesignLifeStart ;
                sh:property [                                # A new Design Life Phase is started with Design Life Start
                    sh:path occp:startsPhase ;                
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeStart' must start exactly one 'occp:PhaseF_DesignLife' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DesignLifeStart' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DesignLifeStart' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DesignLifeEnd ;
                    sh:message "Each 'occp:DesignLifeStart' must occur before 'occp:DesignLifeEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .
            
            osh:DesignLifeChangeShape a sh:NodeShape ;       # Instant Design Life Change (Phase F - Design Life)
                sh:targetClass occp:DesignLifeChange ;
                sh:property [                                # The current Design Life Phase is ended with a Change of Design Life
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:DesignLifeChange' must end at least one 'occp:PhaseF_DesignLife' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # A new Design Life Phase is started with a Change of Design Life
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:DesignLifeChange' must start at least one 'occp:PhaseF_DesignLife' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DesignLifeChange' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order within the Phase
                    sh:path occp:after ;
                    sh:class occp:DesignLifeStart ;
                    sh:message "Each 'occp:DesignLifeChange' must occur after 'occp:DesignLifeStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DesignLifeEnd ;
                    sh:message "Each 'occp:DesignLifeChange' must occur before 'occp:DesignLifeEnd' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DesignLifeChange' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:DesignLifeEndShape a sh:NodeShape ;          # Instant Design Life End (Phase F - Design Life)
                sh:targetClass occp:DesignLifeEnd ;
                sh:property [                                # The current Design Life Phase is ended with Design Life End
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeEnd' must end exactly one 'occp:PhaseF_DesignLife' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order within the Phase - 2 Options
                    [
                        sh:path occp:after ;
                        sh:class occp:DesignLifeStart ;
                        sh:message "Each 'occp:DesignLifeEnd' must occur after 'occp:DesignLifeStart' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:after ;
                        sh:class occp:DesignLifeChange ;
                        sh:message "Each 'occp:DesignLifeEnd' must occur after 'occp:DesignLifeChange' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DesignLifeEnd' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DesignLifeEnd' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

        
    ### PHASE G INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseGInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseG_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseG_Inspection ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseG_Instant' must belong to exactly one 'occp:PhaseG_Inspection' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE G - INSPECTION
            osh:InspectionExecutionShape a sh:NodeShape ;    # Instant Inspection Execution (Phase G - Inspection)
                sh:targetClass occp:InspectionExecution ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionStart ;
                    sh:message "Each 'occp:InspectionExecution' must occur after 'occp:ConstructionStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:or (                                     # Instant's chronological order - 2 Options
                    [
                        sh:path occp:after ;
                        sh:class occp:UsageStart ;
                        sh:message "Each 'occp:InspectionExecution' must occur after 'occp:UsageStart' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                    [
                        sh:path occp:after ;
                        sh:class occp:UsageChange ;
                        sh:message "Each 'occp:InspectionExecution' must occur after 'occp:UsageChange' via 'occp:after'."@en ;
                        sh:severity sh:Violation ;
                    ]
                ) ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:InspectionExecution' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:IrregularInspectionShape a sh:NodeShape ;    # Instant Irregular Inspection (Phase G - Inspection)
                sh:targetClass occp:IrregularInspection ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:UsageStart ;
                    sh:message "Each 'occp:IrregularInspection' must occur after 'occp:UsageStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:IrregularInspection' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:NextRegularInspectionShape a sh:NodeShape ;  # Instant Next Regular Inspection (Phase G - Inspection)
                sh:targetClass occp:NextRegularInspection ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:InspectionExecution ;
                    sh:message "Each 'occp:NextRegularInspection' must occur after 'occp:InspectionExecution' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:UsageStart ;
                    sh:message "Each 'occp:NextRegularInspection' must occur after 'occp:UsageStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:NextRegularInspection' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE H INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseHInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseH_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseH_SpecialEvents ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseH_Instant' must belong to exactly one 'occp:PhaseH_SpecialEvents' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE H - SPECIAL EVENTS
            osh:GeologicalEventShape a sh:NodeShape ;        # Instant Geological Event (Phase H - Special Events)
                sh:targetClass occp:GeologicalEvent ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:GeologicalEvent' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:GeologicalEvent' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:LoadEventShape a sh:NodeShape ;              # Instant Load Event (Phase H - Special Events)
                sh:targetClass occp:LoadEvent ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:LoadEvent' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:LoadEvent' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:WeatherEventShape a sh:NodeShape ;           # Instant Weather Event (Phase H - Special Events)
                sh:targetClass occp:WeatherEvent ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:WeatherEvent' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:WeatherEvent' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE K INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseKInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseK_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseK_Instant' must belong to exactly one 'occp:PhaseK_Damage' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE K - DAMAGE
            osh:DamageDetectionShape a sh:NodeShape ;        # Instant Damage Detection (Phase K - Damage)
                sh:targetClass occp:DamageDetection ;
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DamageDetection' must start exactly one 'occp:PhaseK_Damage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DamageDetection' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DamageDetection' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .
                    
            osh:DamageObservationShape a sh:NodeShape ;      # Instant Damage Observation (Phase K - Damage)
                sh:targetClass occp:DamageObservation ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:DamageDetection ;
                    sh:message "Each 'occp:DamageObservation' must occur after 'occp:DamageDetection' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DamageObservation' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:DamageRepairShape a sh:NodeShape ;           # Instant Damage Repair (Phase K - Damage)
                sh:targetClass occp:DamageRepair ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:DamageDetection ;
                    sh:message "Each 'occp:DamageRepair' must occur after 'occp:DamageDetection' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DamageRepair' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE L INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseLInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseL_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseL_Instant' must belong to exactly one 'occp:PhaseL_Repair' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE L - REPAIR
            osh:NewComponentShape a sh:NodeShape ;           # Instant New Component (Phase L - Repair)
                sh:targetClass occp:NewComponent ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:after ;
                    sh:class occp:ConstructionCompletion ;
                    sh:message "Each 'occp:NewComponent' must occur after 'occp:ConstructionCompletion' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:NewComponent' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:RepairStartShape a sh:NodeShape ;            # Instant Repair Start (Phase L - Repair)
                sh:targetClass occp:RepairStart ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:RepairStart' must start exactly one 'occp:PhaseL_Repair' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:DamageDetection ;
                    sh:message "Each 'occp:RepairStart' must occur after 'occp:DamageDetection' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:RepairCompletion ;
                    sh:message "Each 'occp:RepairStart' must occur before 'occp:RepairCompletion' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:RepairStart' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:RepairCompletionShape a sh:NodeShape ;       # Instant Repair Completion (Phase L - Repair)
                sh:targetClass occp:RepairCompletion ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:RepairCompletion' must end exactly one 'occp:PhaseL_Repair' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:RepairStart ;
                    sh:message "Each 'occp:RepairCompletion' must occur after 'occp:RepairStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:RepairCompletion' must occur before 'occp:DeconstructionStart' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .


    ### PHASE M INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseMInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseM_Instant ;
                sh:property [
                    sh:path occp:hasPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseM_Instant' must belong to exactly one 'occp:PhaseM_Deconstruction' via 'occp:hasPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE M - DECONSTRUCTION
            osh:DeconstructionStartShape a sh:NodeShape ;    # Instant Deconstruction Start (Phase M - Deconstruction)
                sh:targetClass occp:DeconstructionStart ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DeconstructionStart' must start exactly one 'occp:PhaseM_Deconstruction' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:ConstructionAcceptance ;
                    sh:message "Each 'occp:DeconstructionStart' must occur after 'occp:ConstructionAcceptance' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:before ;
                    sh:class occp:DeconstructionCompletion ;
                    sh:message "Each 'occp:DeconstructionStart' must occur before 'occp:DeconstructionCompletion' via 'occp:before'."@en ;
                    sh:severity sh:Violation ;
                ] .

            osh:DeconstructionCompletionShape a sh:NodeShape ;   # Instant Deconstruction Completion (Phase M - Deconstruction)
                sh:targetClass occp:DeconstructionCompletion ;
                sh:property [                                # Instant's chronological order 
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DeconstructionCompletion' must end exactly one 'occp:PhaseM_Deconstruction' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation ;
                ] ;
                sh:property [
                    sh:path occp:after ;
                    sh:class occp:DeconstructionStart ;
                    sh:message "Each 'occp:DeconstructionCompletion' must occur after 'occp:DeconstructionStart' via 'occp:after'."@en ;
                    sh:severity sh:Violation ;
                ] .



