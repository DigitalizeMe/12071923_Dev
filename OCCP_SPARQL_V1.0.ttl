@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix occp:  <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .
@prefix time:  <http://www.w3.org/2006/time#> .
@prefix osh:   <http://www.occpshape.de/shape#> .
@prefix sparql: <http://www.example.de/sparql#> .


#################################################################
#    SPARQL CONSTRUCT Queries
#################################################################


    osh:ConstructPhaseStructure
        a sh:SPARQLConstructTemplate ;
        sh:prefixes occp: ;
        sh:construct """
            CONSTRUCT {
                ?obj occp:hasPhase ?phase .
                ?phase a occp:Phase ;
                    occp:phaseType ?phaseType ;
                    occp:belongsToCycle ?cycle .
                ?cycle a occp:Cycle ;
                    occp:cycleType ?cycleType .
            }
            WHERE {
                ?obj a occp:DataObject .
                # FÃ¼r jede Phase eine eindeutige IRI generieren
                BIND(IRI(CONCAT(STR(?obj), "_phase_", ?phaseNum)) AS ?phase)
                BIND(IRI(CONCAT(STR(?obj), "_cycle_", ?cycleNum)) AS ?cycle)
                # Beispiel: Phasen A, B, C und Zyklen A1, A2
                VALUES (?phaseNum ?phaseType ?cycleNum ?cycleType) {
                    ("A" "PhaseA" "A1" "CycleA1")
                    ("B" "PhaseB" "A2" "CycleA2")
                    ("C" "PhaseC" "A2" "CycleA2")
                }
            }
        """ .


### PHASE RELATED QUERIES

    # PHASE A 
    
    osh:beginningOfPlanningConstruct a osh:ConstructQuery ;
        osh:queryText """
            PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
            CONSTRUCT {
                ?phase occp:hasActualBeginning ?instantStart .
                ?cycle occp:hasActualBeginning ?instantStart .
                ?cycle occp:isInPhase ?phase .
                ?cycle occp:hasCycleNumber ?newNumber .
                ?instantEnd occp:endsPhase ?phase .
                ?instantEnd occp:endsCycle ?cycle .
                ?phase occp:hasEstimatedEnd ?instantEnd .
                ?cycle occp:hasEstimatedEnd ?instantEnd .
            }
            WHERE {
                ?instantStart a occp:BeginningOfPlanning ;
                    occp:startsPhase ?phase ;
                    occp:startsCycle ?cycle ;
                    occp:hasActualTime ?startTime .
                ?component occp:hasPhase ?phase ;
                    occp:hasCycle ?cycle .
                ?phase occp:hasEstimatedEnd ?instantEnd .
                ?cycle occp:hasEstimatedEnd ?instantEnd .
                {
                    SELECT ?component (COALESCE(MAX(?number), 0) + 1 AS ?newNumber)
                    WHERE {
                        ?component occp:hasCycle ?prevCycle .
                        ?prevCycle occp:hasCycleNumber ?number .
                    }
                    GROUP BY ?component
                }
            }
        """ .