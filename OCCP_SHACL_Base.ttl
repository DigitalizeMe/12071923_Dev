@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix occp:  <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .
@prefix time:  <http://www.w3.org/2006/time#> .
@prefix osh:   <http://www.occpshape.de/shape#> .

### Ursprüngliche General SHACL Rules
osh:GeneralDatePropertyShape a sh:PropertyShape ;
    sh:path ( occp:hasActualTime occp:hasEstimatedTime ) ;
    sh:datatype xsd:date ;
    sh:message "Dates must be in YYYY-MM-DD format."@en ;
    sh:severity sh:Violation .

osh:GeneralTimeShape a sh:NodeShape ;
    sh:targetClass time:TemporalEntity ;
    sh:property [
        sh:path ( time:hasBeginning time:hasEnd ) ;
        sh:class time:Instant ;
        sh:minCount 1 ;
        sh:message "At least one 'time:hasBeginning' or 'time:hasEnd' must reference a 'time:Instant'."@en ;
        sh:severity sh:Violation ;
    ] ;
    sh:property [
        sh:path occp:hasActualBeginning ;
        sh:class time:Instant ;
        sh:maxCount 1 ;
        sh:message "Each entity must have at most one actual beginning via occp:hasActualBeginning."@en ;
        sh:severity sh:Violation ;
    ] ;
    sh:property [
        sh:path occp:hasActualEnd ;
        sh:class time:Instant ;
        sh:maxCount 1 ;
        sh:message "Each entity must have at most one actual end via occp:hasActualEnd."@en ;
        sh:severity sh:Violation ;
    ] .

osh:InstantTimeShape a sh:NodeShape ;
    sh:targetClass time:Instant ;
    sh:property [
        sh:path occp:hasActualTime ;
        sh:datatype xsd:date ;
        sh:maxCount 1 ;
        sh:message "Each instant must have at most one actual timestamp via occp:hasActualTime of type xsd:date."@en ;
        sh:severity sh:Violation ;
    ] ;
    sh:property [
        sh:path occp:hasEstimatedTime ;
        sh:datatype xsd:date ;
        sh:message "Each instant must have estimated timestamps via occp:hasEstimatedTime of type xsd:date."@en ;
        sh:severity sh:Violation ;
    ] .

### Generische Regel für occp:before mit Aggregaten
osh:BeforeTimeShape a sh:NodeShape ;
    sh:targetClass time:TemporalEntity ;
    sh:sparql [
        sh:select """
            SELECT $this ?other ?latestEndTime ?earliestStartTime WHERE {
                $this occp:before ?other .
                {
                    SELECT $this (MAX(?endTime) AS ?latestEndTime)
                    WHERE {
                        $this time:hasEnd ?endInstant .
                        ?endInstant occp:hasActualTime ?endTime .
                    }
                    GROUP BY $this
                }
                {
                    SELECT ?other (MIN(?startTime) AS ?earliestStartTime)
                    WHERE {
                        ?other time:hasBeginning ?startInstant .
                        ?startInstant occp:hasActualTime ?startTime .
                    }
                    GROUP BY ?other
                }
                FILTER (?latestEndTime >= ?earliestStartTime)
            }
        """ ;
        sh:message "The latest end of { $this } (time: { ?latestEndTime }) must be before the earliest beginning of { ?other } (time: { ?earliestStartTime }) via 'occp:before'."@en ;
        sh:severity sh:Violation
    ] .

### Generische Regel für occp:after mit Aggregaten
osh:AfterTimeShape a sh:NodeShape ;
    sh:targetClass time:TemporalEntity ;
    sh:sparql [
        sh:select """
            SELECT $this ?other ?earliestStartTime ?latestEndTime WHERE {
                $this occp:after ?other .
                {
                    SELECT $this (MIN(?startTime) AS ?earliestStartTime)
                    WHERE {
                        $this time:hasBeginning ?startInstant .
                        ?startInstant occp:hasActualTime ?startTime .
                    }
                    GROUP BY $this
                }
                {
                    SELECT ?other (MAX(?endTime) AS ?latestEndTime)
                    WHERE {
                        ?other time:hasEnd ?endInstant .
                        ?endInstant occp:hasActualTime ?endTime .
                    }
                    GROUP BY ?other
                }
                FILTER (?earliestStartTime <= ?latestEndTime)
            }
        """ ;
        sh:message "The earliest beginning of { $this } (time: { ?earliestStartTime }) must be after the latest end of { ?other } (time: { ?latestEndTime }) via 'occp:after'."@en ;
        sh:severity sh:Violation
    ] .

### Implizite Reihenfolge-Regel
osh:PhaseOrderTimeShape a sh:NodeShape ;
    sh:targetClass occp:Phase ;
    sh:sparql [
        sh:select """
            SELECT $this ?other ?latestEndTime ?earliestStartTime WHERE {
                {
                    SELECT $this (MAX(?endTime) AS ?latestEndTime)
                    WHERE {
                        $this time:hasEnd ?endInstant .
                        ?endInstant occp:hasActualTime ?endTime .
                    }
                    GROUP BY $this
                }
                {
                    SELECT ?other (MIN(?startTime) AS ?earliestStartTime)
                    WHERE {
                        ?other time:hasBeginning ?startInstant .
                        ?startInstant occp:hasActualTime ?startTime .
                    }
                    GROUP BY ?other
                }
                FILTER (?latestEndTime >= ?earliestStartTime)
                FILTER (?other != $this)
                FILTER (
                    ($this a occp:PhaseA_Planning && ?other a occp:PhaseB_Review) ||
                    ($this a occp:PhaseA_Planning && ?other a occp:PhaseC_Construction) ||
                    ($this a occp:PhaseB_Review && ?other a occp:PhaseC_Construction)
                )
            }
        """ ;
        sh:message "The latest end of { $this } (time: { ?latestEndTime }) must be before the earliest beginning of { ?other } (time: { ?earliestStartTime }) based on phase order."@en ;
        sh:severity sh:Violation
    ] .