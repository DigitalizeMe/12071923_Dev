Chronological Models (cMod)
Towards consistent life cycle information management



ABSTRACT 
The cMod framework introduces a novel approach to managing chronological construction models, integrating life cycle phases, update tracking, and spatial context for enhanced Building Information Modeling (BIM) in railway infrastructure. Leveraging ontologies—OCCP for phase chronology and OULD for updates and Linked Data—the framework unifies these into a Chronological Model ABox (CMA), managed by the cMod Manager (cMM) software. An Area Model concept provides a georeferenced base for model aggregation. Minimal examples demonstrate phase assignment, update chains, and validation, tested with small-scale IFC models. While promising, limitations include untested scalability, absent Git integration, and conceptual georeferencing. Future work aims to refine querying, versioning, and railway applicability, potentially aligning with PROV-O. cMod offers a foundation for life cycle management, aiming to bridge static BIM with dynamic timelines.

KEYWORDS
Life cycle information management, OCCP, model chronology, ontology



1. INTRODUCTION 
The railway industry, amongst others in the Architecture, Engineering and Construction (AECO) sector, faces unique and complex challenges in managing data across the life cycle of its assets, from planning and design to construction, operation, and maintenance (Chen, Y. & Jupp, J.R., 2021), (Kumari, J., 2022). Railway projects are characterized by their vast scale, long timelines, and the involvement of numerous stakeholders, all of which generate immense volumes of data. This data, however, is often inconsistent, difficult to access, and trapped in isolated silos, particularly in the German railway sector, where data fragmentation is a pervasive issue. These data silos, stemming from discipline-specific storage practices, mean that specialized planners maintain their own datasets without necessarily making them available to stakeholders and collaborators within the industry. As a result, the collaboration between teams needed for a successful implementation of the BIM methods is hindered and the effectiveness of data identification and accessibility is not ideal. A common problem in the sector is the difficulty in locating accurate, up-to-date plans of railway assets, especially in digital formats such as 3D models or data compatible with the BIM method and Geographic Information Systems (GIS). This fragmentation often leads to inefficiencies, such as redundant data collection efforts (e.g., multiple geodetic surveys of the same asset), increased costs, and delays in decision-making, slowing the development of digital twins.
Beyond accessibility, the railway sector exemplifies the need for chronological consistency and georeferenced data management. Railway assets, e.g., tracks, stations, signaling systems, and more, undergo frequent updates, repairs, and expansions over decades. Maintaining a clear, time-sequenced record of these changes is vital for operational safety, regulatory compliance, and efficient maintenance planning. Yet, current practices often fail to provide a centralized, accessible system for tracking this evolution, leaving data scattered across disparate systems and formats. Similarly, the georeferenced nature of railway infrastructure demands precise spatial data integration, which is frequently undermined by the lack of a unified approach to data combination. Without such integration, opportunities to leverage linked data or advanced methodologies like BIM remain under-utilized.
The push for digital transformation in the railway industry has spotlighted BIM as a promising solution to enhance collaboration, improve data consistency, and support life cycle management of assets (Biancardo, S. A. et al., 2021). BIM’s strength lies in its ability to integrate 3D models with rich, structured information, fostering better decision-making. However, its successful adoption depends on overcoming existing limitations in data management, i.e.,, the inability to effectively version, synchronize, and make accessible the complex, evolving datasets that railway projects demand, over extended periods of time. Traditional approaches, rooted in fragmented systems and siloed data, fall short of meeting these requirements, underscoring the need for a more robust framework.
To address these challenges, this paper demonstrates the current state of development of chronological Models (cMod), an approach designed to improve construction model management introduced by Vaatz et al. in 2023. cMod integrates IFC models, ontologies, and Git-based version control to create a unified, life cycle-oriented data management system. By leveraging the Ontology for Chronological Construction Processes (OCCP), which extends the Time Ontology (Cox, S. & Little, C., 2006), and the Ontology for Updates and Linked Data (OULD), cMod aims to achieve chronological consistency through structured versioning and life cycle oriented information management. This paper updates and expands the cMod concept, illustrates its application with a minimal example, and evaluates its potential to address the railway industry’s data management challenges. By bridging the gap between current practices and the demands of modern infrastructure projects, cMod aims to offer a path toward more efficient, collaborative, and data-driven asset management through data consistency. 

2. BACKGROUND AND RELATED WORK
The cMod framework emerges from established technologies in the AECO industry, tailored to railway data management challenges. IFC, standardized by buildingSMART, underpins BIM interoperability, with IFC 4.3 (EN ISO 16739-1:2024) supporting railway assets (Fontul et al., 2022). IFC provides time tracking functionality via timestamps and life cycle context through phase and status attributes. However, this life cycle-related information remains static within individual models, complicating the creation of dynamic building chronologies capable of representing evolving model states across the entire life cycle (Jia, J. et al, 2024), and Borgo et al. (2015) note IFC’s ontological limits in asset management. Digital twins could provide profound information depth, if developed and maintained, though the amount of data to be handled still offers challenges to be overcome (Jeschke, S. & Grassmann, R., 2021), (Wu, D. et al., 2025).
Versioning tools in AECO, like Autodesk Revit or Bentley ProjectWise, manage design iterations centrally, which brings along collaboration strengths, yet centralized systems lack flexibility for distributed railway teams. Esser et al. discuss graph-based version control approaches using Git, but focus on incremental planning changes and scalability for the validation of IFC files remains a challenge (Esser, S. et al., 2023).
Ontologies structure knowledge for semantic integration and ifcOWL enables IFC querying (Pauwels et al., 2017). Beetz (2015) and Stuckenschmidt (2009) provide ontology foundations, but complexity hinders adoption (Hitzler et al., 2008). Ontological concepts for the management of life cycle related information have been introduced (Karlapudi, J. et al., 2021), (Vaatz, A. et al., 2023), and Hamdan et al. (2021) model structural damage semantically, while the railway topology ontology (RTO) provides a semantic framework for railway related projects  (Bischof, S. & Schenner, G., 2021).
Linked Data connects datasets semantically and ICDD (ISO 21597-1) links BIM to external data. Fuchs (2015) explores multimodel integration, while Wogan et al. (2024) apply ontologies to infrastructure planning and Al-Sadoon et al. (2023) propose expanding the ICDD concept through dynamic links. 
IFC, versioning tools, ontologies, Linked Data, and Git offer robust foundations but fall short in railway life cycle management, lacking chrono- logical depth, distributed flexibility, and seamless integration. 

3. CORE CONCEPT OF CMOD
Chronological Models aim to bridge the gap between static BIM data and the dynamic temporal needs of life cycle information management. At its core, cMod provides a framework for embedding temporal information and chronological consistency directly into construction models, enabling changes and progress to be tracked throughout the project life cycle. Central to cMod is the ability to manage model related temporal data in order to store, update, validate, and visualise historical states of constructions and their components for the complete life cycle of a construction and beyond. 
The cMod approach is based on the temporal enrichment of IFC models by contextualising time stamps using an ontology designed to represent the typical life cycle of constructions. This approach can be extended to Linked Data, creating a chronology for models, components, and the data linked to it while aiming to maintain compatibility with industry standards and concepts like applying ontology-based rules for infrastructure planning (Wogan, M., et al., 2024), (Mellenthin Filardo, M., et al., 2024) or other ontologies, such as the Damage Topology Ontology (DOT) (Hamdan, A.-H., et al., 2021). It supports a variety of use cases, including long time process monitoring, phase-specific comparisons and detailed audits of planned versus actual timelines.

3.1 Main elements
The cMod framework comprises four primary modules that collectively provide a structured approach to managing and validating temporal data in construction projects.

3.1.1 Ontology for Chronological Construction Processes (OCCP)
The Ontology for Chronological Construction Processes (OCCP) establishes the semantic foundation for cMod by defining a structured representation of construction life cycles. It is based on the Time Ontology (Cox, S. & Little, C., 2006) and is designed to provide a general life cycle structure, intentionally avoiding national-, industry- or regulation-specific definitions to improve adaptability. The current Terminology Box (TBox) divides the construction life cycle into phases and transitions by extending the class time:Interval with subclasses such as occp:Phase and occp:Cycle, which have additional subclasses to represent typical life cycle phases (e.g., the planning phase, represented by occp:PhaseA_Planning, or the construction phase, represented by occp:PhaseC_Construction) and cycles within the life cycle, such as the cycle of planning and review (represented by the class occp:CycleA_PlanningReview), which may have several iterations of plan changes and review processes before being completed. Figure 1 provides an overview of the phases and transitions currently included in the OCCP.

Figure 1: Phases and Transitions of the OCCP
For each phase, the OCCP defines a set of events. Therefore, phase-specific subclasses of time:Instant are defined, e.g., occp:PhaseA_Instant or PhaseC_Instant (following the enumeration of the phase classes), containing additional classes to represent phase-specific events and milestones. For example, the beginning of planning, data procurement events, and the submission of a plan or model to review are events within the planning phase that are represented by occp:BeginningOfPlanning, occp:DataProcurement, and so on, where each of the classes in this example is defined as a subclass of occp:PhaseA_Instant. 
SHACL rules are used to set the boundaries of the chronological order within the OCCP for both phases, transitions, cycles, and the instants within phases, enabling the validation of temporal data against predefined life cycle patterns. This ontology provides a flexible basis for temporal data management.

3.1.2 Ontology for Updates and Linked Data (OULD)
The Ontology for Updates and Linked Data (OULD) provides a structured framework for managing updates to construction models and integrating external data sources, designed to track changes and maintain a comprehensive record of an entity’s evolution over time. Developed as a standalone ontology with a strong connection to the OCCP, OULD defines a set of classes and properties that enable the representation of updates, their sequence, and their connections to both model components and linked datasets, offering a foundation for chronological data management in construction contexts.
At its core, OULD introduces the class ould:UpdatableEntity to represent elements subject to modification, such as an IFC model or a specific component like a wall or track section. Each ould:UpdatableEntity is uniquely identified using the property ould:hasIFCModelID, which assigns the identifier of the entity (e.g., "ifc:Wall1"), linking it to its corresponding IFC representation, and ould:hasHash, which stores the hash value of the model or component to ensure the entity’s state can be verified for consistency. The property ould:containsModel allows an entity to be decomposed into subcomponents, supporting hierarchical relationships within complex models, though its application remains optional depending on the model’s granularity.
Updates to these entities are captured through the class ould:Update, linked to an ould:UpdatableEntity via ould:hasUpdate. Each update instance can record specific changes using properties like ould:hasUpdatedEvent, which associates the update with a temporal event (e.g., a construction milestone or a damage event), or ould:hasUpdatedValue, which specifies the entity or value modified. The update’s timestamp is recorded via the time:hasTime property from the Time Ontology, ensuring precise chronological placement. To establish a sequence of changes, OULD employs ould:hasPredecessor and ould:hasSuccessor, which connect updates into an update chain (ould:UpdateChain). This chain tracks the progression of an entity’s states, for instance, a wall’s initial placement followed by its replacement, forming a directed history accessible through the aggregating property ould:hasUpdateChain, which references the entire sequence.
For cases involving component replacement, OULD defines specialized update types like ould:UpdateReplacement, which includes additional properties such as ould:hasNewIFCID and ould:hasPreviousIFCID to document transitions between identifiers (e.g., from "ifc:Wall1" to "ifc:Wall2"), alongside ould:hasNewHash and ould:hasPreviousHash to track corresponding state changes. This ensures continuity in the update chain even when physical entities and their digital representations are replaced.
OULD further enhances its utility through the ould:LinkedData class, which connects updatable entities or updates to external datasets via the property ould:hasLinkedData. The associated ould:hasDataLocation specifies the location or URI of these resources, such as maintenance records or subsoil surveys, enabling integration with broader data ecosystems. This Linked Data capability aims to enrich the chronological record with contextual information, though its scalability with diverse, large datasets requires further exploration. 
OULD’s design aims to create a comprehensive chronology by tracking both model updates and associated external data, a feature particularly relevant for long time asset management purposes, e.g., in the railway sector, with the need of information tracking over extended periods of time, though its performance with large datasets is yet to be assessed.

3.1.3 Chronological Model ABox (CMA)
The Chronological Model ABox (CMA) serves as the integrative layer that combines the OCCP and the OULD into a cohesive Assertion Box (ABox) tailored to a specific IFC model, stored in Turtle format. This module synthesizes OCCP’s life cycle chronology with OULD’s update tracking and external data connections, forming the foundation for a chronological model that captures the temporal evolution of construction assets. By enriching IFC components with properties from both ontologies, the CMA enables a unified representation of an asset’s life cycle phases and its history of changes, bridging static BIM data with dynamic project timelines and handling both the dates of the changes of an asset and the dates of the recording of these changes within the cMod.
In a CMA, an entity such as ex:Pole, classified as an ould:UpdatableEntity, is linked to OCCP-defined life cycle phases (e.g., planning, construction) via properties like occp:belongsToPhase, which assign timestamps and phase states to reflect its chronological progression. Simultaneously, OULD properties such as ould:hasIFCModelID connect this entity to its corresponding IFC representation (e.g., an identifier like "ifc:Pole1" referencing a pole element within an IFC model), while ould:hasUpdateChain ties it to a sequence of updates recorded in an update chain. For instance, a pole might transition from a planning phase to construction, with each state documented alongside updates to its geometry or material properties, all preserved within the CMA, if needed. The property ould:hasLinkedData further extends this by associating the entity with external datasets, such as installation records or geotechnical surveys, enhancing the temporal context with operational or environmental information. 
The CMA has been implemented and tested with minimal examples, such as site and architectural models, where it successfully combines OCCP and OULD data into a single ABox. These initial tests demonstrate the potential for integrating life cycle phases with update histories, laying the groundwork for querying temporal states. For example, the structure supports the future development of SPARQL queries to extract information like the phase of components at a specific date, though such queries have not yet been fully executed or validated beyond basic examples. Validation mechanisms, including SHACL rules from both ontologies, are applied to ensure data consistency, such as maintaining phase sequence integrity and update coherence, based on the current implementation.
This module seeks to establish a robust foundation for chronological modeling by connecting OCCP’s phase-based structure with OULD’s update-driven detail, with ongoing development focused on enhancing its capacity to handle larger datasets. Future efforts will explore the execution of advanced queries and refine validation processes to support comprehensive life cycle management and data-driven decision-making in railway infrastructure projects.

3.1.4 cMod Manager (cMM)
The cMod Manager (cMM) is a software application under development to serve as the operational interface for creating, managing, and validating chronological models. Designed to integrate IFC models with the CMA, the cMM aims to provide users with tools to process, edit, query and maintain temporal data, ensuring consistency and accessibility across construction project life cycles. While its development is ongoing and currently limited to foundational functionalities, the cMM leverages the ontologies of OCCP and OULD to streamline the handling of complex chronological information, with a particular focus on supporting railway infrastructure management.
In its present state, the cMM facilitates the initial stages of cMod creation by importing IFC models and extracting their structural and property information using ifcOpenShell-based parsing scripts. This process generates a preliminary dataset that forms the basis for the CMA, linking IFC components to temporal properties defined by OCCP and update records tracked by OULD. For example, an IFC model of a railway site can be parsed to identify elements like tracks or poles, which are then enriched with phase data and update histories within the CMA. Validation of this data against SHACL rules from both ontologies ensures logical consistency, such as verifying that phase transitions align with predefined sequences and that update chains remain intact. These capabilities have been tested with minimal examples, demonstrating the potential to unify static BIM data with dynamic timelines, though the implementation remains basic and lacks a comprehensive user interface.
The cMod Manager aims to incorporate a hash-based change tracking mechanism to maintain data integrity between IFC models and their associated CMA datasets. By leveraging the ould:hasHash property, the system is designed to detect modifications, additions, or deletions in IFC components, ensuring the CMA reflects the current model state. A planned integration with Git seeks to enhance this by providing distributed version control, where changes to IFC models or CMA records would be committed to a repository, preserving a detailed history and supporting collaboration across teams. This functionality remains under development and untested, particularly for large-scale models or complex branching workflows, due to challenges in adapting Git for IFC’s binary file structure—a technical hurdle requiring further investigation.
Looking forward, the cMM aims to expand its capabilities to fully manage and access cMods. One key goal is to enable the creation and editing of CMA records, allowing users to manually add timestamps, define phase transitions, or link external datasets via ould:hasLinkedData. Another objective is to develop querying tools, such as SPARQL-based interfaces, to extract specific temporal states from the CMA, for instance, retrieving all components in a construction phase on a given date. These queries could inform visualization features, where the cMM would display the model in a viewer reflecting the queried state (e.g., showing only constructed elements as of March 2025) or filter linked datasets for a specific time period. While these advanced features are not yet implemented, they align with the framework’s vision of providing a practical solution for life cycle management.

3.1.5 Area Model Concept
The Area Model concept introduces a spatial framework within the cMod framework, designed to serve as a consistent base model that encapsulates the overarching history of a defined construction area and integrates related construction models. Represented in the ontology as an entity of the owl:class ould:Site, the Area Model acts as a reference container for individual models—such as buildings, tracks, or signals—within a specific geographic region, providing a unified context for their chronological and spatial evolution. This approach is particularly relevant for railway infrastructure, where assets span large areas and require a cohesive historical and spatial narrative across decades.
The Area Model’s primary role is to establish a stable foundation in which other construction models can be embedded and managed over time. For instance, a railway site might encompass multiple IFC models representing different assets, each with its own CMA tracking life cycle phases and updates. The Area Model aggregates these into a single, overarching entity, preserving a comprehensive history of the area’s development. This aggregation leverages OCCP’s phase-based chronology and OULD’s update chains, ensuring that temporal data from individual models aligns within the broader context of the site.
A potential key feature of the Area Model is its georeferencing capability, which aims to anchor the model to a global coordinate system while supporting local placement of related construction models. The concept proposes defining the Area Model with global coordinates, providing a georeferenced baseline for the entire site. Within this framework, individual models could be positioned using a local, area-specific coordinate system. For example, a railway station model might be placed at local coordinates (x: 100, y: 200, z: 10) relative to the Area Model’s origin, with its global position derived from the site’s georeferenced anchor. This dual-coordinate approach seeks to simplify georeferencing by centralizing it at the Area Model level, reducing the need to individually georeference each component model.
In its current state, the Area Model concept is implemented conceptually within CMA datasets, where entities like ex:Site1 are classified as occp:Site and associated with temporal and update data. The georeferencing and local coordinate system, however, remain theoretical, with no fully operational implementation yet developed. Initial tests with minimal examples demonstrate the potential to group related models under a single site entity, but the integration of coordinate systems and their validation across complex railway networks is an ongoing effort. 

4. EXAMPLES
This section illustrates the cMod framework through minimal examples, demonstrating its core components, OCCP, OULD, CMA, cMM, and the Area Model, and reflecting the current development state as of March 2025. These examples utilize small-scale, non-railway IFC models designed for testing the ontologies and SHACL rules, showcasing their functionality in a proof-of-concept context. While railway-specific applications remain a future goal, the examples highlight the framework’s ability to integrate life cycle phases, track updates, and establish a chronological foundation. The TBoxes for OCCP and OULD, underpinning these examples, are nearing release, with publication links to be provided in the camera-ready version.
Figure 2 illustrates the OCCP’s approach to structuring construction life cycles by modeling phases and their associated instants in a temporal framework. It features a planning phase, depicted as ex:PhaseA_Planning_Site, which is initiated by an instant of type occp:BeginningOfPlanning through the occp:hasActualBeginning object property, inversely linked via occp:startsPhase. This instant carries an actual timestamp, reflecting a definitive start based on real-world events. Within the same phase, an additional instant of type occp:SubmissionToReview is connected using occp:belongsToInstant and its inverse occp:belongsToPhase, marking a significant milestone like a submission deadline, here set with an actual time to indicate a completed action. 
The subsequent review phase, represented by ex:PhaseB_Review_Site, begins with an instant of the type occp:ReviewStart via the object property occp:hasActualBeginning, and concludes with an instant of type occp:ReviewApproval linked through occp:hasEstimatedEnd and occp:endsPhase. This final instant uses an estimated time, highlighting OCCP’s ability to distinguish between confirmed (hasActualTime) and projected (hasEstimatedTime) temporal boundaries, which impacts phase transitions by allowing flexibility in planning versus fixed execution points. 
This figure simplifies the full scope of OCCP’s capabilities for clarity. Beyond the depicted phases, OCCP accommodates a wider array of life cycle stages or life cycle related phases, such as construction, usage, or deconstruction, each with their own set of instants like occp:DataProcurement, occp:ConstructionStart or occp:DeconstructionCompletion, enabling detailed tracking of project events. The distinction between actual and estimated times supports dynamic adjustments, where phase ends can shift based on real progress versus initial forecasts. Additionally, though not shown, OCCP’s occp:Cycle class allows for grouping iterative processes, such as repeated planning-review cycles, providing a robust framework for managing complex, non-linear project timelines with high adaptability to real-world changes.
Figure 3 showcases OULD’s hierarchical organization and its mechanism for tracking updates across construction models and components. It begins with ex:IFC_Site, which contains ex:IFC_Architecture via the ould:containsModel property, inversely linked by ould:hasSite. This establishes a top-level spatial aggregation. Within ex:IFC_Architecture, a component ex:Wall is defined as a child through ould:hasChild, with the inverse ould:hasParent, illustrating a nested structure typical of building models. The ex:Wall entity is tied to a planning phase, ex:PhaseA_Planning_Wall, via ould:hasPhase, integrating OCCP’s chronological framework into OULD’s hierarchy. An update, ex:Wall_Update1, is connected to ex:Wall using ould:hasUpdate, timestamped with time:hasTime to mark the entry point of the modification. This update links to an event instant, ex:instant_Edit_Wall, via ould:hasUpdatedEvent, with a separate timestamp to distinguish the actual event time from the entry time, demonstrating OULD’s precision in temporal tracking. Additionally, ex:Wall connects to an external documentation file, "Material Delivery Documentation", through ould:hasLinkedData, integrating supplementary data into the model.
This representation simplifies OULD’s broader functionality. Beyond this basic hierarchy, OULD enables phase propagation from child to parent entities through CONSTRUCT queries, ensuring that temporal boundaries (e.g., beginnings and ends) are inherited up the structure, though not depicted here for brevity. Updates can be chained into ould:UpdateChain instances to track sequential modifications with predecessor-successor relationships, providing a detailed and consistent history of changes. The ould:LinkedData class extends this further, allowing tracking of external resources with attributes like file paths, hashes, and entry times, treating them as updatable entities akin to physical components. This offers a comprehensive approach to life cycle management, capturing both structural and documentary evolution with fine-grained temporal control. 
 Together, Figures 1 and 2 demonstrate the combined potential of OCCP and OULD within the cMod framework, integrating chronological phase management with hierarchical model tracking. OCCP provides a structured timeline through its phases and instants, distinguishing actual and estimated times to define precise starts and flexible ends, adaptable to project dynamics. OULD complements this by organizing construction entities into a nested hierarchy—sites containing models, models containing components—while linking these to OCCP phases and tracking updates with dual timestamps for events and entries. This synergy enables cMod to represent a construction project’s life cycle holistically, from overarching phase progression to detailed component modifications, including the integration of external documentation via linked data.
While these figures simplify the framework for clarity, cMod’s capabilities extend further. OCCP’s support for cycles and additional phases can model iterative or extended processes, while OULD’s update chains and phase propagation offer deeper insights into change histories and structural relationships. Together, they facilitate queries across temporal and hierarchical dimensions, potentially aiding tasks like progress monitoring or compliance checks. However, these possibilities remain contingent on practical implementation and data availability, suggesting a promising yet evolving toolset for life cycle management in construction, with room for refinement as adoption and testing progress.
The cMod framework, integrating OCCP and OULD, is demonstrated through a minimal CMA in Figure 4 and an exemplary SPARQL query answering key competency questions (CQs) in Figure 5. This section showcases how cMod supports life cycle management by combining chronological phase tracking with hierarchical update and data linkage capabilities. Full CMAs and supporting TBoxes are available in the camera ready paper after publication of the repository in the near future.
Figure 4 represents a construction site (ex:IFC_Site) containing an architectural model (ex:IFC_Architecture), which includes a component (ex:Wall). The model and component are linked to a planning phase (ex:PhaseA_Planning_Arch, ex:PhaseA_Planning_Wall) active from December 2024 to February 2025, followed by a construction phase for the wall (ex:PhaseC_Construction_Wall) from March to April 2025. An update (ex:Wall_Update1) records a modification to ex:Wall with an event time of March 5, 2025, and an entry time of March 6, 2025, reflecting a change in its state, such as a design adjustment. Additionally, ex:Wall connects to an external dataset (ex:Material_Delivery_Doc) via ould:hasLinkedData, integrating supplementary documentation into the model.
The following CQs validate cMod’s capabilities in addressing life cycle management challenges, with one answered explicitly via SPARQL and the others outlined theoretically:
CQ1: "Which components of a construction site were in the planning phase on January 1, 2025?"
This question targets phase-specific states, critical for project oversight and difficult without temporal data in static IFC models. Using cMod, a SPARQL query could retrieve components linked to occp:PhaseA_Planning via ould:hasPhase, filtering by actual start and end times encompassing January 1, 2025. With Listing 1, ex:Wall and ex:IFC_Architecture would be returned, demonstrating phase tracking across hierarchy levels.
CQ2: "What changes were made to a specific component between March 5 and March 6, 2025?"
Essential for audits, this CQ is challenging without native change tracking in IFC. Figure 5 answers it directly, identifying ex:Wall_Update1 for ex:Wall, with an event time of March 5 and entry time of March 6, 2025. This highlights cMod’s ability to distinguish event occurrence from data entry, a key feature for precise modification history.
CQ3: "Which external datasets are linked to a component’s construction phase?"
Relevant for connecting models to real-world context, this is hard without standardized links in IFC. A query on Listing 1 using ould:hasLinkedData and ould:hasPhase for occp:PhaseC_Construction_Wall returns ex:Material_Delivery_Doc, showing how cMod integrates external data with construction phases, a potential enabler for enhanced project documentation.

5. DISCUSSION
The cMod framework seeks to address the persistent challenge of temporal data management in construction, particularly for railway infrastructure, where static IFC models often fail to capture long-term asset evolution. While its ontology-driven approach offers a structured solution, the current implementation reveals significant gaps that warrant scrutiny, tempered by its potential to enhance lifecycle tracking beyond existing BIM standards. This integration addresses key challenges in railway infrastructure, such as tracking asset evolution over decades, where static BIM data alone falls short.
Nevertheless, several limitations temper the presented achievements. The current implementation relies on small-scale, non-railway test models, limiting its validation for complex railway networks, a critical target domain. The cMM’s functionality remains basic, with parsing and validation operational but lacking advanced querying (e.g., SPARQL fully executed) and Git integration, both essential for practical deployment. The Area Model’s georeferencing is conceptual and untested, restricting its spatial utility. Scalability also remains unproven; large IFC files or extensive CMAs could strain parsing and validation processes, a concern echoed in ontology-driven systems. These gaps reflect an early-stage prototype, robust in concept but requiring significant refinement.
Self-critically, the development of OULD overlaps with existing standards like PROV-O, a W3C provenance ontology that could enhance cMod’s interoperability and maturity (Moreau et al., 2013). While OULD’s IFC-specific properties (e.g., ould:hasIFCModelID) offer tailored utility, PROV-O’s broader adoption and agent-based tracking suggest a potential future alignment or hybrid approach, reducing redundancy and leveraging established tools. This oversight underscores the need for deeper literature integration, a focus for post-submission reassessment. Despite these shortcomings, cMod’s modular design and focus on chronological BIM data provide a novel contribution, with ongoing efforts aimed at addressing these limitations to realize its full potential in railway life cycle management.

6. CONCLUSION AND OUTLOOK
The cMod framework presents a novel approach to managing chronological construction models, integrating life cycle phases, update tracking, and spatial context into a cohesive system. Through the development of OCCP, OULD, CMA, cMM, and the Area Model concept, it establishes a foundation for capturing the temporal evolution of construction assets, tested successfully with minimal examples. These components enable the enrichment of IFC models with phase data and change histories, validated through SHACL rules and supported by initial parsing and inference tools within the cMM. This lays the groundwork for addressing long-term asset management challenges, particularly in domains requiring detailed historical records.
Despite these achievements, the framework remains in an early stage, with significant hurdles ahead. The absence of Git integration limits versioning capabilities, while the lack of advanced querying restricts data access—both critical for practical use. The Area Model’s georeferencing and the scalability of CMA for large railway networks are yet to be realized, reflecting a prototype still maturing toward its full vision. Current examples, though functional, are small-scale, necessitating further development to validate broader applicability.
Future work will refine the cMod Manager with version control and SPARQL querying for efficient state extraction and visualization. Operational georeferencing could bolster the Area Model’s spatial role, and scaling to complex railway data is a key goal. Alignment with PROV-O could enhance interoperability, leveraging established standards. Additionally, cMod’s machine-readable structure opens cautious prospects for AI integration, potentially enabling advanced life cycle data analysis. Such advancements aim to evolve cMod into a practical tool, linking static BIM with dynamic needs in railway infrastructure and beyond, though significant development remains to unlock this potential fully.

6. REFERENCES
Al-Sadoon, N.; Scherer, R.; Menzel, K., 2023. From Static to Dynamic Information Containers. In: Proceedings of the 2023 European Conference on Computing in Construction and the 40th International CIB W78 Conference, July 2023. https://doi.org/10.35490/EC3.2023.243.
Beetz, J., 2015. Ordnungssysteme im Bauwesen. In: Borrmann, A., et al. (eds.) Building Information Modeling. Wiesbaden: Springer.
Biancardo, S. A., Intignano, M., Viscione, N., Guerra De Oliveira, S., Tibaut, A., Procedural Modeling-Based BIM Approach for Railway Design, Journal of Advanced Transportation, 2021, 8839362, 17 pages, 2021. https://doi.org/10.1155/2021/8839362.
Bischof, S. & Schenner, G., 2021. Rail Topology Ontology: A Rail Infrastructure Base Ontology. DOI: 10.1007/978-3-030-88361-4_35. 
Borgo, S., et al., 2015. Ontological Analysis and Engineering Standards. In: Ebrahimipour, V., et al. (eds.) Ontology Modeling. Heidelberg: Springer.
Chen, Y. & Jupp, J.R., 2021. Requirements Engineering in Complex Infrastructure: Challenges to the Development and Management of Rail Transport Requirements. In: Proceedings of the 44th AUBEA Conference, Deakin University, Australia, 27–29 Oct 2021​.
Cox, S. & Little, C. (2006) Time Ontology in OWL. https://www.w3.org/TR/owl-time/ . Accessed date: 29th January 2025.
Esser, S., Vilgertshofer, S., Borrmann, A., 2023. Version control for asynchronous BIM collaboration: Model merging through graph analysis and transformation, Automation in Construction, Volume 155, 2023, 105063, ISSN 0926-5805, https://doi.org/10.1016/j.autcon.2023.105063.
Fontul, S., et al., 2022. IFC development for BIM application to railway projects. Journal of Rail Transport Planning & Management, 23, p.100327.
Hamdan, A.-H., et al., 2021. A semantic modeling approach for structural damage detection. Automation in Construction, 128, p.103739.
Hitzler, P., et al., 2008. Semantic Web: Grundlagen. Heidelberg: Springer.
Hussain, O.A.I.; Moehler, R.C.;Walsh, S.D.C.; Ahiaga-Dagbui, D.D. Minimizing Cost Overrun in Rail Projects through 5D-BIM: A Conceptual Governance Framework. Buildings 2024, 14, 478. https://doi.org/10.3390/buildings14020478.
Jeschke, S.; Grassmann, R., 2021. Development of a Generic Implementation Strategy of Digital Twins in Logistics Systems under Consideration of the German Rail Transport. Appl. Sci. 2021, 11, 10289. https://doi.org/10.3390/app 112110289 .
Jia, J., Ma, H., & Zhang, Z. (2024). Integration of Industry Foundation Classes and Ontology: Data, Applications, Modes, Challenges, and Opportunities. Buildings, 14(4), 911. https://doi.org/10.3390/buildings14040911.
Karlapudi, J.; Valluru, P.; Menzel, K., 2021. Ontology Approach for Building Lifecycle Data Management. In: Proceedings of the ASCE International Conference on Computing in Civil Engineering (i3CE2021), Orlando, Florida, USA, October 2021.
Kumari, J., 2022. Augmented Asset Management of Railway System Empowered by Industrial AI. Licentiate Thesis, Luleå University of Technology, Sweden​.
Moreau, L., Missier, P., et al., (2013). PROV-DM: The PROV Data Model. W3C Recommendation, Available: https://www.w3.org/TR/prov-dm/
Stuckenschmidt, H., 2009. Ontologien: Konzepte, Technologien. Heidelberg: Springer.
Vaatz, A., et al., 2023. Integration of semantic temporal information in BIM. EC3. DOI: 10.35490/EC3.2023.281.
Wogan, M., et al., 2024. Digital rules in infrastructure planning. EG-ICE 2024, pp.31–40.
Wu, D., Zheng, A., Yu, W., Cao, H., Ling, Q., Liu, J., & Zhou, D., 2025. Digital Twin Technology in Transportation Infrastructure: A Comprehensive Survey of Current Applications, Challenges, and Future Directions. Applied Sciences, 15(4), 1911. https://doi.org/10.3390/app15041911.

